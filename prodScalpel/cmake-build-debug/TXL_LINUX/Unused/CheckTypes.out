program  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out" short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin) {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
compilation_unit  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out" short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin) {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
repeat_0_function_definition_or_declaration  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out" short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin) {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
function_definition_or_declaration  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out"
declaration  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out"
__declaration_11__  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out"
opt__inLineComment  
empty  
preprocessor  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out"
TAB_1  
preprocessor_line  #include "/home/alex/workspace/TestTXL/TransplantCode/InterfaceHeader.out"
NL  
repeat_0_function_definition_or_declaration  short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin) {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
function_definition_or_declaration  short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin) {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
function_definition  short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin) {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
NL  
function_header  short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin)
__function_header_1__  short GRAFT_INTERFACE (int length, int *arrayC, FILE *fout, FILE *fin)
opt__decl_specifiers  short
decl_specifiers  short
repeat_0_decl_qualifier_or_type_specifier  short
decl_qualifier_or_type_specifier  short
decl_qualifier  short
type_qualifier  short
bit_qualifier  short
*literal  short
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
declarator  GRAFT_INTERFACE
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  GRAFT_INTERFACE
reference_id  GRAFT_INTERFACE
id  GRAFT_INTERFACE
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
function_declarator_extension  (int length, int *arrayC, FILE *fout, FILE *fin)
*literal  (
argument_declaration_list  int length, int *arrayC, FILE *fout, FILE *fin
list_0_argument_declaration  int length, int *arrayC, FILE *fout, FILE *fin
argument_declaration  int length
__argument_declaration_1__  int length
decl_specifiers  int length
repeat_0_decl_qualifier_or_type_specifier  int length
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  length
decl_qualifier_or_type_specifier  length
type_specifier  length
simple_type_name  length
type_id  length
reference_id  length
id  length
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
opt__argument_declarator  
empty  
list_0_argument_declaration  int *arrayC, FILE *fout, FILE *fin
argument_declaration  int *arrayC
__argument_declaration_1__  int *arrayC
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
opt__argument_declarator  *arrayC
argument_declarator  *arrayC
__argument_declarator_1__  *arrayC
declarator  *arrayC
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  arrayC
reference_id  arrayC
id  arrayC
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
list_0_argument_declaration  FILE *fout, FILE *fin
argument_declaration  FILE *fout
__argument_declaration_1__  FILE *fout
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
opt__argument_declarator  *fout
argument_declarator  *fout
__argument_declarator_1__  *fout
declarator  *fout
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  fout
reference_id  fout
id  fout
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
list_0_argument_declaration  FILE *fin
argument_declaration  FILE *fin
__argument_declaration_1__  FILE *fin
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
opt__argument_declarator  *fin
argument_declarator  *fin
__argument_declarator_1__  *fin
declarator  *fin
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  fin
reference_id  fin
id  fin
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
list_0_argument_declaration  
empty  
empty  
opt__comma_dotdotdot  
empty  
*literal  )
repeat_0_cv_qualifier  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_preprocessor_function_header  
empty  
empty  
opt__KR_parameter_decls  
empty  
compound_statement  {//COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}}
*literal  {
IN  
NL  
compound_statement_body  //COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
repeat_0_declaration_or_statement  //COMPOUND START: if (1 == 1) {} /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  //COMPOUND START: if (1 == 1) {}
commentLine  //COMPOUND START: if (1 == 1) {}
commentToken  //COMPOUND START: if (1 == 1) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */} //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
statement  /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
__statement_2__  /* COMPOUND: 0 */ if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 0 */
inLineComment  /* COMPOUND: 0 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
c_unlabeled_statement  if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
structured_statement  if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
if_statement  if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
__if_statement_1__  if (1 == 1) {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
*literal  if
*literal  (
expression_list  1 == 1
list_0_expression  1 == 1
expression  1 == 1
assignment_expression  1 == 1
conditional_expression  1 == 1
logical_OR_expression  1 == 1
logical_AND_expression  1 == 1
inclusive_OR_expression  1 == 1
exclusive_OR_expression  1 == 1
AND_expression  1 == 1
equality_expression  1 == 1
relational_expression  1
shift_expression  1
additive_expression  1
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  == 1
equality_relational_expression  == 1
equality_operator  ==
*literal  ==
relational_expression  1
shift_expression  1
additive_expression  1
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
compound_statement  {/* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10; /* COMPOUND: 0 */}
*literal  {
IN  
NL  
compound_statement_body  /* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10;
repeat_0_declaration_or_statement  /* DECL: 0 */ int $_main_x; /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10;
declaration_or_statement  /* DECL: 0 */ int $_main_x;
declaration  /* DECL: 0 */ int $_main_x;
__declaration_4__  /* DECL: 0 */ int $_main_x;
opt__inLineComment  /* DECL: 0 */
inLineComment  /* DECL: 0 */
decl_specifiers  int $_main_x
repeat_0_decl_qualifier_or_type_specifier  int $_main_x
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  $_main_x
decl_qualifier_or_type_specifier  $_main_x
type_specifier  $_main_x
simple_type_name  $_main_x
type_id  $_main_x
reference_id  $_main_x
id  $_main_x
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 1 */ int $_main_y; /* STM: 0 */ $_main_x = 10;
declaration_or_statement  /* DECL: 1 */ int $_main_y;
declaration  /* DECL: 1 */ int $_main_y;
__declaration_4__  /* DECL: 1 */ int $_main_y;
opt__inLineComment  /* DECL: 1 */
inLineComment  /* DECL: 1 */
decl_specifiers  int $_main_y
repeat_0_decl_qualifier_or_type_specifier  int $_main_y
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  $_main_y
decl_qualifier_or_type_specifier  $_main_y
type_specifier  $_main_y
simple_type_name  $_main_y
type_id  $_main_y
reference_id  $_main_y
id  $_main_y
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 0 */ $_main_x = 10;
declaration_or_statement  /* STM: 0 */ $_main_x = 10;
statement  /* STM: 0 */ $_main_x = 10;
__statement_2__  /* STM: 0 */ $_main_x = 10;
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 0 */
inLineComment  /* STM: 0 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_x = 10;
c_unlabeled_statement  $_main_x = 10;
__c_unlabeled_statement_1__  $_main_x = 10;
simple_statement  $_main_x = 10
expression_statement  $_main_x = 10
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_x
conditional_expression  $_main_x
logical_OR_expression  $_main_x
logical_AND_expression  $_main_x
inclusive_OR_expression  $_main_x
exclusive_OR_expression  $_main_x
AND_expression  $_main_x
equality_expression  $_main_x
relational_expression  $_main_x
shift_expression  $_main_x
additive_expression  $_main_x
multiplicative_expression  $_main_x
cast_expression  $_main_x
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_x
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_x
postfix_expression  $_main_x
primary  $_main_x
reference_id  $_main_x
id  $_main_x
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = 10
assign_assignment_expression  = 10
assignment_operator  =
*literal  =
assignment_expression  10
conditional_expression  10
logical_OR_expression  10
logical_AND_expression  10
inclusive_OR_expression  10
exclusive_OR_expression  10
AND_expression  10
equality_expression  10
relational_expression  10
shift_expression  10
additive_expression  10
multiplicative_expression  10
cast_expression  10
repeat_0_cast_operator  
empty  
empty  
unary_expression  10
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  10
postfix_expression  10
primary  10
constant  10
number  10
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  /* COMPOUND: 0 */
inLineComment  /* COMPOUND: 0 */
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  //COMPOUND END: if (1 == 1) {} /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  //COMPOUND END: if (1 == 1) {}
commentLine  //COMPOUND END: if (1 == 1) {}
commentToken  //COMPOUND END: if (1 == 1) {}
NL  
repeat_0_declaration_or_statement  /* DECL: 2 */ FILE *$_main_ifile; /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 2 */ FILE *$_main_ifile;
declaration  /* DECL: 2 */ FILE *$_main_ifile;
__declaration_4__  /* DECL: 2 */ FILE *$_main_ifile;
opt__inLineComment  /* DECL: 2 */
inLineComment  /* DECL: 2 */
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_main_ifile
init_declarator  *$_main_ifile
declarator  *$_main_ifile
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_ifile
reference_id  $_main_ifile
id  $_main_ifile
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 3 */ FILE *$_main_ofile; /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 3 */ FILE *$_main_ofile;
declaration  /* DECL: 3 */ FILE *$_main_ofile;
__declaration_4__  /* DECL: 3 */ FILE *$_main_ofile;
opt__inLineComment  /* DECL: 3 */
inLineComment  /* DECL: 3 */
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_main_ofile
init_declarator  *$_main_ofile
declarator  *$_main_ofile
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_ofile
reference_id  $_main_ofile
id  $_main_ofile
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 4 */ char *$_main_dbuf; /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 4 */ char *$_main_dbuf;
declaration  /* DECL: 4 */ char *$_main_dbuf;
__declaration_4__  /* DECL: 4 */ char *$_main_dbuf;
opt__inLineComment  /* DECL: 4 */
inLineComment  /* DECL: 4 */
decl_specifiers  char
repeat_0_decl_qualifier_or_type_specifier  char
decl_qualifier_or_type_specifier  char
type_specifier  char
simple_type_name  char
*literal  char
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_main_dbuf
init_declarator  *$_main_dbuf
declarator  *$_main_dbuf
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_dbuf
reference_id  $_main_dbuf
id  $_main_dbuf
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size; /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size;
declaration  /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size;
__declaration_4__  /* DECL: 5 */ int $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size;
opt__inLineComment  /* DECL: 5 */
inLineComment  /* DECL: 5 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_main_msPerPacket, $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size
init_declarator  $_main_msPerPacket
declarator  $_main_msPerPacket
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_msPerPacket
reference_id  $_main_msPerPacket
id  $_main_msPerPacket
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_main_bytesPerPacket, $_main_i, $_main_seqno, $_main_filesize, $_main_size
init_declarator  $_main_bytesPerPacket
declarator  $_main_bytesPerPacket
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_main_i, $_main_seqno, $_main_filesize, $_main_size
init_declarator  $_main_i
declarator  $_main_i
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_i
reference_id  $_main_i
id  $_main_i
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_main_seqno, $_main_filesize, $_main_size
init_declarator  $_main_seqno
declarator  $_main_seqno
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_seqno
reference_id  $_main_seqno
id  $_main_seqno
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_main_filesize, $_main_size
init_declarator  $_main_filesize
declarator  $_main_filesize
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_filesize
reference_id  $_main_filesize
id  $_main_filesize
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_main_size
init_declarator  $_main_size
declarator  $_main_size
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_size
reference_id  $_main_size
id  $_main_size
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 6 */ int $_main_samplesPerPacket; /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 6 */ int $_main_samplesPerPacket;
declaration  /* DECL: 6 */ int $_main_samplesPerPacket;
__declaration_4__  /* DECL: 6 */ int $_main_samplesPerPacket;
opt__inLineComment  /* DECL: 6 */
inLineComment  /* DECL: 6 */
decl_specifiers  int $_main_samplesPerPacket
repeat_0_decl_qualifier_or_type_specifier  int $_main_samplesPerPacket
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  $_main_samplesPerPacket
decl_qualifier_or_type_specifier  $_main_samplesPerPacket
type_specifier  $_main_samplesPerPacket
simple_type_name  $_main_samplesPerPacket
type_id  $_main_samplesPerPacket
reference_id  $_main_samplesPerPacket
id  $_main_samplesPerPacket
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 7 */ int $_main_hist [32], $_main_j; /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 7 */ int $_main_hist [32], $_main_j;
declaration  /* DECL: 7 */ int $_main_hist [32], $_main_j;
__declaration_4__  /* DECL: 7 */ int $_main_hist [32], $_main_j;
opt__inLineComment  /* DECL: 7 */
inLineComment  /* DECL: 7 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_main_hist [32], $_main_j
init_declarator  $_main_hist [32]
declarator  $_main_hist [32]
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_hist
reference_id  $_main_hist
id  $_main_hist
SPON  
repeat_0_declarator_extension  [32]
declarator_extension  [32]
array_declarator_extension  [32]
*literal  [
opt__constant_expression  32
constant_expression  32
conditional_expression  32
logical_OR_expression  32
logical_AND_expression  32
inclusive_OR_expression  32
exclusive_OR_expression  32
AND_expression  32
equality_expression  32
relational_expression  32
shift_expression  32
additive_expression  32
multiplicative_expression  32
cast_expression  32
repeat_0_cast_operator  
empty  
empty  
unary_expression  32
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  32
postfix_expression  32
primary  32
constant  32
number  32
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
*literal  ]
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_main_j
init_declarator  $_main_j
declarator  $_main_j
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_j
reference_id  $_main_j
id  $_main_j
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 8 */ short *$_main_samples; /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 8 */ short *$_main_samples;
declaration  /* DECL: 8 */ short *$_main_samples;
__declaration_4__  /* DECL: 8 */ short *$_main_samples;
opt__inLineComment  /* DECL: 8 */
inLineComment  /* DECL: 8 */
decl_specifiers  short
repeat_0_decl_qualifier_or_type_specifier  short
decl_qualifier_or_type_specifier  short
decl_qualifier  short
type_qualifier  short
bit_qualifier  short
*literal  short
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_main_samples
init_declarator  *$_main_samples
declarator  *$_main_samples
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_samples
reference_id  $_main_samples
id  $_main_samples
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 9 */ int $_main_strategy = 0; /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* DECL: 9 */ int $_main_strategy = 0;
declaration  /* DECL: 9 */ int $_main_strategy = 0;
__declaration_4__  /* DECL: 9 */ int $_main_strategy = 0;
opt__inLineComment  /* DECL: 9 */
inLineComment  /* DECL: 9 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_main_strategy = 0
init_declarator  $_main_strategy = 0
declarator  $_main_strategy
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_main_strategy
reference_id  $_main_strategy
id  $_main_strategy
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = 0
initialization  = 0
__initialization_1__  = 0
opt__initdata  
empty  
*literal  =
initializer  0
__initializer_1__  0
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  0
initializer_unit  0
assignment_expression  0
conditional_expression  0
logical_OR_expression  0
logical_AND_expression  0
inclusive_OR_expression  0
exclusive_OR_expression  0
AND_expression  0
equality_expression  0
relational_expression  0
shift_expression  0
additive_expression  0
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r"); /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r");
statement  /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r");
__statement_2__  /* STM: 1 */ $_main_ifile = fopen ("in.wav", "r");
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 1 */
inLineComment  /* STM: 1 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_ifile = fopen ("in.wav", "r");
c_unlabeled_statement  $_main_ifile = fopen ("in.wav", "r");
__c_unlabeled_statement_1__  $_main_ifile = fopen ("in.wav", "r");
simple_statement  $_main_ifile = fopen ("in.wav", "r")
expression_statement  $_main_ifile = fopen ("in.wav", "r")
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_ifile
conditional_expression  $_main_ifile
logical_OR_expression  $_main_ifile
logical_AND_expression  $_main_ifile
inclusive_OR_expression  $_main_ifile
exclusive_OR_expression  $_main_ifile
AND_expression  $_main_ifile
equality_expression  $_main_ifile
relational_expression  $_main_ifile
shift_expression  $_main_ifile
additive_expression  $_main_ifile
multiplicative_expression  $_main_ifile
cast_expression  $_main_ifile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ifile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ifile
postfix_expression  $_main_ifile
primary  $_main_ifile
reference_id  $_main_ifile
id  $_main_ifile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = fopen ("in.wav", "r")
assign_assignment_expression  = fopen ("in.wav", "r")
assignment_operator  =
*literal  =
assignment_expression  fopen ("in.wav", "r")
conditional_expression  fopen ("in.wav", "r")
logical_OR_expression  fopen ("in.wav", "r")
logical_AND_expression  fopen ("in.wav", "r")
inclusive_OR_expression  fopen ("in.wav", "r")
exclusive_OR_expression  fopen ("in.wav", "r")
AND_expression  fopen ("in.wav", "r")
equality_expression  fopen ("in.wav", "r")
relational_expression  fopen ("in.wav", "r")
shift_expression  fopen ("in.wav", "r")
additive_expression  fopen ("in.wav", "r")
multiplicative_expression  fopen ("in.wav", "r")
cast_expression  fopen ("in.wav", "r")
repeat_0_cast_operator  
empty  
empty  
unary_expression  fopen ("in.wav", "r")
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  fopen ("in.wav", "r")
postfix_expression  fopen ("in.wav", "r")
primary  fopen
reference_id  fopen
id  fopen
SPOFF  
repeat_0_postfix_extension   ("in.wav", "r")
postfix_extension   ("in.wav", "r")
__postfix_extension_2__   ("in.wav", "r")
SP   
*literal  (
SPON  
list_0_argument_expression  "in.wav", "r"
argument_expression  "in.wav"
__argument_expression_1__  "in.wav"
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  "in.wav"
conditional_expression  "in.wav"
logical_OR_expression  "in.wav"
logical_AND_expression  "in.wav"
inclusive_OR_expression  "in.wav"
exclusive_OR_expression  "in.wav"
AND_expression  "in.wav"
equality_expression  "in.wav"
relational_expression  "in.wav"
shift_expression  "in.wav"
additive_expression  "in.wav"
multiplicative_expression  "in.wav"
cast_expression  "in.wav"
repeat_0_cast_operator  
empty  
empty  
unary_expression  "in.wav"
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  "in.wav"
postfix_expression  "in.wav"
primary  "in.wav"
constant  "in.wav"
string  "in.wav"
__string_1__  "in.wav"
stringlit  "in.wav"
repeat_0_string_unit  
empty  
empty  
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  "r"
argument_expression  "r"
__argument_expression_1__  "r"
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  "r"
conditional_expression  "r"
logical_OR_expression  "r"
logical_AND_expression  "r"
inclusive_OR_expression  "r"
exclusive_OR_expression  "r"
AND_expression  "r"
equality_expression  "r"
relational_expression  "r"
shift_expression  "r"
additive_expression  "r"
multiplicative_expression  "r"
cast_expression  "r"
repeat_0_cast_operator  
empty  
empty  
unary_expression  "r"
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  "r"
postfix_expression  "r"
primary  "r"
constant  "r"
string  "r"
__string_1__  "r"
stringlit  "r"
repeat_0_string_unit  
empty  
empty  
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+"); //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+");
statement  /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+");
__statement_2__  /* STM: 2 */ $_main_ofile = fopen ("out.wav", "w+");
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 2 */
inLineComment  /* STM: 2 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_ofile = fopen ("out.wav", "w+");
c_unlabeled_statement  $_main_ofile = fopen ("out.wav", "w+");
__c_unlabeled_statement_1__  $_main_ofile = fopen ("out.wav", "w+");
simple_statement  $_main_ofile = fopen ("out.wav", "w+")
expression_statement  $_main_ofile = fopen ("out.wav", "w+")
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_ofile
conditional_expression  $_main_ofile
logical_OR_expression  $_main_ofile
logical_AND_expression  $_main_ofile
inclusive_OR_expression  $_main_ofile
exclusive_OR_expression  $_main_ofile
AND_expression  $_main_ofile
equality_expression  $_main_ofile
relational_expression  $_main_ofile
shift_expression  $_main_ofile
additive_expression  $_main_ofile
multiplicative_expression  $_main_ofile
cast_expression  $_main_ofile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ofile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ofile
postfix_expression  $_main_ofile
primary  $_main_ofile
reference_id  $_main_ofile
id  $_main_ofile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = fopen ("out.wav", "w+")
assign_assignment_expression  = fopen ("out.wav", "w+")
assignment_operator  =
*literal  =
assignment_expression  fopen ("out.wav", "w+")
conditional_expression  fopen ("out.wav", "w+")
logical_OR_expression  fopen ("out.wav", "w+")
logical_AND_expression  fopen ("out.wav", "w+")
inclusive_OR_expression  fopen ("out.wav", "w+")
exclusive_OR_expression  fopen ("out.wav", "w+")
AND_expression  fopen ("out.wav", "w+")
equality_expression  fopen ("out.wav", "w+")
relational_expression  fopen ("out.wav", "w+")
shift_expression  fopen ("out.wav", "w+")
additive_expression  fopen ("out.wav", "w+")
multiplicative_expression  fopen ("out.wav", "w+")
cast_expression  fopen ("out.wav", "w+")
repeat_0_cast_operator  
empty  
empty  
unary_expression  fopen ("out.wav", "w+")
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  fopen ("out.wav", "w+")
postfix_expression  fopen ("out.wav", "w+")
primary  fopen
reference_id  fopen
id  fopen
SPOFF  
repeat_0_postfix_extension   ("out.wav", "w+")
postfix_extension   ("out.wav", "w+")
__postfix_extension_2__   ("out.wav", "w+")
SP   
*literal  (
SPON  
list_0_argument_expression  "out.wav", "w+"
argument_expression  "out.wav"
__argument_expression_1__  "out.wav"
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  "out.wav"
conditional_expression  "out.wav"
logical_OR_expression  "out.wav"
logical_AND_expression  "out.wav"
inclusive_OR_expression  "out.wav"
exclusive_OR_expression  "out.wav"
AND_expression  "out.wav"
equality_expression  "out.wav"
relational_expression  "out.wav"
shift_expression  "out.wav"
additive_expression  "out.wav"
multiplicative_expression  "out.wav"
cast_expression  "out.wav"
repeat_0_cast_operator  
empty  
empty  
unary_expression  "out.wav"
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  "out.wav"
postfix_expression  "out.wav"
primary  "out.wav"
constant  "out.wav"
string  "out.wav"
__string_1__  "out.wav"
stringlit  "out.wav"
repeat_0_string_unit  
empty  
empty  
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  "w+"
argument_expression  "w+"
__argument_expression_1__  "w+"
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  "w+"
conditional_expression  "w+"
logical_OR_expression  "w+"
logical_AND_expression  "w+"
inclusive_OR_expression  "w+"
exclusive_OR_expression  "w+"
AND_expression  "w+"
equality_expression  "w+"
relational_expression  "w+"
shift_expression  "w+"
additive_expression  "w+"
multiplicative_expression  "w+"
cast_expression  "w+"
repeat_0_cast_operator  
empty  
empty  
unary_expression  "w+"
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  "w+"
postfix_expression  "w+"
primary  "w+"
constant  "w+"
string  "w+"
__string_1__  "w+"
stringlit  "w+"
repeat_0_string_unit  
empty  
empty  
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: if ($_main_ofile == 0) {} /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  //COMPOUND START: if ($_main_ofile == 0) {}
commentLine  //COMPOUND START: if ($_main_ofile == 0) {}
commentToken  //COMPOUND START: if ($_main_ofile == 0) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */} //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
statement  /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
__statement_2__  /* COMPOUND: 1 */ if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 1 */
inLineComment  /* COMPOUND: 1 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
c_unlabeled_statement  if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
structured_statement  if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
if_statement  if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
__if_statement_1__  if ($_main_ofile == 0) {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
*literal  if
*literal  (
expression_list  $_main_ofile == 0
list_0_expression  $_main_ofile == 0
expression  $_main_ofile == 0
assignment_expression  $_main_ofile == 0
conditional_expression  $_main_ofile == 0
logical_OR_expression  $_main_ofile == 0
logical_AND_expression  $_main_ofile == 0
inclusive_OR_expression  $_main_ofile == 0
exclusive_OR_expression  $_main_ofile == 0
AND_expression  $_main_ofile == 0
equality_expression  $_main_ofile == 0
relational_expression  $_main_ofile
shift_expression  $_main_ofile
additive_expression  $_main_ofile
multiplicative_expression  $_main_ofile
cast_expression  $_main_ofile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ofile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ofile
postfix_expression  $_main_ofile
primary  $_main_ofile
reference_id  $_main_ofile
id  $_main_ofile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  == 0
equality_relational_expression  == 0
equality_operator  ==
*literal  ==
relational_expression  0
shift_expression  0
additive_expression  0
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
compound_statement  {/* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1); /* COMPOUND: 1 */}
*literal  {
IN  
NL  
compound_statement_body  /* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1);
repeat_0_declaration_or_statement  /* STM: 3 */ fprintf (stderr, "File creation failed\n"); /* STM: 4 */ exit (1);
declaration_or_statement  /* STM: 3 */ fprintf (stderr, "File creation failed\n");
declaration  /* STM: 3 */ fprintf (stderr, "File creation failed\n");
__declaration_4__  /* STM: 3 */ fprintf (stderr, "File creation failed\n");
opt__inLineComment  /* STM: 3 */
inLineComment  /* STM: 3 */
decl_specifiers  fprintf (stderr, "File creation failed\n")
repeat_0_decl_qualifier_or_type_specifier  fprintf (stderr, "File creation failed\n")
decl_qualifier_or_type_specifier  fprintf (stderr, "File creation failed\n")
__decl_qualifier_or_type_specifier_1__  fprintf (stderr, "File creation failed\n")
not__asm_spec  
TXL_NOT_  
macro_specifier  fprintf (stderr, "File creation failed\n")
macro_call  fprintf (stderr, "File creation failed\n")
macro_name  fprintf
id  fprintf
*literal  (
macro_arguments  stderr, "File creation failed\n"
repeat_0_macro_argument  stderr, "File creation failed\n"
macro_argument  stderr
__macro_argument_2__  stderr
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  stderr
repeat_0_macro_argument  , "File creation failed\n"
macro_argument  ,
__macro_argument_2__  ,
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
*literal  ,
repeat_0_macro_argument  "File creation failed\n"
macro_argument  "File creation failed\n"
__macro_argument_2__  "File creation failed\n"
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
stringlit  "File creation failed\n"
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 4 */ exit (1);
declaration_or_statement  /* STM: 4 */ exit (1);
declaration  /* STM: 4 */ exit (1);
__declaration_4__  /* STM: 4 */ exit (1);
opt__inLineComment  /* STM: 4 */
inLineComment  /* STM: 4 */
decl_specifiers  exit (1)
repeat_0_decl_qualifier_or_type_specifier  exit (1)
decl_qualifier_or_type_specifier  exit (1)
__decl_qualifier_or_type_specifier_1__  exit (1)
not__asm_spec  
TXL_NOT_  
macro_specifier  exit (1)
macro_call  exit (1)
macro_name  exit
id  exit
*literal  (
macro_arguments  1
repeat_0_macro_argument  1
macro_argument  1
__macro_argument_2__  1
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
number  1
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  /* COMPOUND: 1 */
inLineComment  /* COMPOUND: 1 */
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  //COMPOUND END: if ($_main_ofile == 0) {} /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  //COMPOUND END: if ($_main_ofile == 0) {}
commentLine  //COMPOUND END: if ($_main_ofile == 0) {}
commentToken  //COMPOUND END: if ($_main_ofile == 0) {}
NL  
repeat_0_declaration_or_statement  /* STM: 5 */ $_main_msPerPacket = 20; /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 5 */ $_main_msPerPacket = 20;
statement  /* STM: 5 */ $_main_msPerPacket = 20;
__statement_2__  /* STM: 5 */ $_main_msPerPacket = 20;
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 5 */
inLineComment  /* STM: 5 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_msPerPacket = 20;
c_unlabeled_statement  $_main_msPerPacket = 20;
__c_unlabeled_statement_1__  $_main_msPerPacket = 20;
simple_statement  $_main_msPerPacket = 20
expression_statement  $_main_msPerPacket = 20
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_msPerPacket
conditional_expression  $_main_msPerPacket
logical_OR_expression  $_main_msPerPacket
logical_AND_expression  $_main_msPerPacket
inclusive_OR_expression  $_main_msPerPacket
exclusive_OR_expression  $_main_msPerPacket
AND_expression  $_main_msPerPacket
equality_expression  $_main_msPerPacket
relational_expression  $_main_msPerPacket
shift_expression  $_main_msPerPacket
additive_expression  $_main_msPerPacket
multiplicative_expression  $_main_msPerPacket
cast_expression  $_main_msPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_msPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_msPerPacket
postfix_expression  $_main_msPerPacket
primary  $_main_msPerPacket
reference_id  $_main_msPerPacket
id  $_main_msPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = 20
assign_assignment_expression  = 20
assignment_operator  =
*literal  =
assignment_expression  20
conditional_expression  20
logical_OR_expression  20
logical_AND_expression  20
inclusive_OR_expression  20
exclusive_OR_expression  20
AND_expression  20
equality_expression  20
relational_expression  20
shift_expression  20
additive_expression  20
multiplicative_expression  20
cast_expression  20
repeat_0_cast_operator  
empty  
empty  
unary_expression  20
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  20
postfix_expression  20
primary  20
constant  20
number  20
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket); /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket);
statement  /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket);
__statement_2__  /* STM: 6 */ $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket);
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 6 */
inLineComment  /* STM: 6 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket);
c_unlabeled_statement  $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket);
__c_unlabeled_statement_1__  $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket);
simple_statement  $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
expression_statement  $_main_filesize = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_filesize
conditional_expression  $_main_filesize
logical_OR_expression  $_main_filesize
logical_AND_expression  $_main_filesize
inclusive_OR_expression  $_main_filesize
exclusive_OR_expression  $_main_filesize
AND_expression  $_main_filesize
equality_expression  $_main_filesize
relational_expression  $_main_filesize
shift_expression  $_main_filesize
additive_expression  $_main_filesize
multiplicative_expression  $_main_filesize
cast_expression  $_main_filesize
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_filesize
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_filesize
postfix_expression  $_main_filesize
primary  $_main_filesize
reference_id  $_main_filesize
id  $_main_filesize
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
assign_assignment_expression  = process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
assignment_operator  =
*literal  =
assignment_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
conditional_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
logical_OR_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
logical_AND_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
inclusive_OR_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
exclusive_OR_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
AND_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
equality_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
relational_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
shift_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
additive_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
multiplicative_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
cast_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
repeat_0_cast_operator  
empty  
empty  
unary_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
postfix_expression  process_wav_header ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
primary  process_wav_header
reference_id  process_wav_header
id  process_wav_header
SPOFF  
repeat_0_postfix_extension   ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
postfix_extension   ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
__postfix_extension_2__   ($_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket)
SP   
*literal  (
SPON  
list_0_argument_expression  $_main_ifile, $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket
argument_expression  $_main_ifile
__argument_expression_1__  $_main_ifile
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_ifile
conditional_expression  $_main_ifile
logical_OR_expression  $_main_ifile
logical_AND_expression  $_main_ifile
inclusive_OR_expression  $_main_ifile
exclusive_OR_expression  $_main_ifile
AND_expression  $_main_ifile
equality_expression  $_main_ifile
relational_expression  $_main_ifile
shift_expression  $_main_ifile
additive_expression  $_main_ifile
multiplicative_expression  $_main_ifile
cast_expression  $_main_ifile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ifile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ifile
postfix_expression  $_main_ifile
primary  $_main_ifile
reference_id  $_main_ifile
id  $_main_ifile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  $_main_ofile, $_main_msPerPacket, &$_main_bytesPerPacket
argument_expression  $_main_ofile
__argument_expression_1__  $_main_ofile
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_ofile
conditional_expression  $_main_ofile
logical_OR_expression  $_main_ofile
logical_AND_expression  $_main_ofile
inclusive_OR_expression  $_main_ofile
exclusive_OR_expression  $_main_ofile
AND_expression  $_main_ofile
equality_expression  $_main_ofile
relational_expression  $_main_ofile
shift_expression  $_main_ofile
additive_expression  $_main_ofile
multiplicative_expression  $_main_ofile
cast_expression  $_main_ofile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ofile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ofile
postfix_expression  $_main_ofile
primary  $_main_ofile
reference_id  $_main_ofile
id  $_main_ofile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  $_main_msPerPacket, &$_main_bytesPerPacket
argument_expression  $_main_msPerPacket
__argument_expression_1__  $_main_msPerPacket
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_msPerPacket
conditional_expression  $_main_msPerPacket
logical_OR_expression  $_main_msPerPacket
logical_AND_expression  $_main_msPerPacket
inclusive_OR_expression  $_main_msPerPacket
exclusive_OR_expression  $_main_msPerPacket
AND_expression  $_main_msPerPacket
equality_expression  $_main_msPerPacket
relational_expression  $_main_msPerPacket
shift_expression  $_main_msPerPacket
additive_expression  $_main_msPerPacket
multiplicative_expression  $_main_msPerPacket
cast_expression  $_main_msPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_msPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_msPerPacket
postfix_expression  $_main_msPerPacket
primary  $_main_msPerPacket
reference_id  $_main_msPerPacket
id  $_main_msPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  &$_main_bytesPerPacket
argument_expression  &$_main_bytesPerPacket
__argument_expression_1__  &$_main_bytesPerPacket
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  &$_main_bytesPerPacket
conditional_expression  &$_main_bytesPerPacket
logical_OR_expression  &$_main_bytesPerPacket
logical_AND_expression  &$_main_bytesPerPacket
inclusive_OR_expression  &$_main_bytesPerPacket
exclusive_OR_expression  &$_main_bytesPerPacket
AND_expression  &$_main_bytesPerPacket
equality_expression  &$_main_bytesPerPacket
relational_expression  &$_main_bytesPerPacket
shift_expression  &$_main_bytesPerPacket
additive_expression  &$_main_bytesPerPacket
multiplicative_expression  &$_main_bytesPerPacket
cast_expression  &$_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  &$_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  &$_main_bytesPerPacket
__sub_unary_expression_1__  &$_main_bytesPerPacket
unary_operator  &
*literal  &
SPOFF  
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2; /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2;
statement  /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2;
__statement_2__  /* STM: 7 */ $_main_samplesPerPacket = $_main_bytesPerPacket / 2;
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 7 */
inLineComment  /* STM: 7 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_samplesPerPacket = $_main_bytesPerPacket / 2;
c_unlabeled_statement  $_main_samplesPerPacket = $_main_bytesPerPacket / 2;
__c_unlabeled_statement_1__  $_main_samplesPerPacket = $_main_bytesPerPacket / 2;
simple_statement  $_main_samplesPerPacket = $_main_bytesPerPacket / 2
expression_statement  $_main_samplesPerPacket = $_main_bytesPerPacket / 2
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_samplesPerPacket
conditional_expression  $_main_samplesPerPacket
logical_OR_expression  $_main_samplesPerPacket
logical_AND_expression  $_main_samplesPerPacket
inclusive_OR_expression  $_main_samplesPerPacket
exclusive_OR_expression  $_main_samplesPerPacket
AND_expression  $_main_samplesPerPacket
equality_expression  $_main_samplesPerPacket
relational_expression  $_main_samplesPerPacket
shift_expression  $_main_samplesPerPacket
additive_expression  $_main_samplesPerPacket
multiplicative_expression  $_main_samplesPerPacket
cast_expression  $_main_samplesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_samplesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_samplesPerPacket
postfix_expression  $_main_samplesPerPacket
primary  $_main_samplesPerPacket
reference_id  $_main_samplesPerPacket
id  $_main_samplesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = $_main_bytesPerPacket / 2
assign_assignment_expression  = $_main_bytesPerPacket / 2
assignment_operator  =
*literal  =
assignment_expression  $_main_bytesPerPacket / 2
conditional_expression  $_main_bytesPerPacket / 2
logical_OR_expression  $_main_bytesPerPacket / 2
logical_AND_expression  $_main_bytesPerPacket / 2
inclusive_OR_expression  $_main_bytesPerPacket / 2
exclusive_OR_expression  $_main_bytesPerPacket / 2
AND_expression  $_main_bytesPerPacket / 2
equality_expression  $_main_bytesPerPacket / 2
relational_expression  $_main_bytesPerPacket / 2
shift_expression  $_main_bytesPerPacket / 2
additive_expression  $_main_bytesPerPacket / 2
multiplicative_expression  $_main_bytesPerPacket / 2
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  / 2
multipy_divide_cast_expression  / 2
multiplicative_operator  /
*literal  /
cast_expression  2
repeat_0_cast_operator  
empty  
empty  
unary_expression  2
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  2
postfix_expression  2
primary  2
constant  2
number  2
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 8 */ init_dct ($_main_samplesPerPacket); /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 8 */ init_dct ($_main_samplesPerPacket);
declaration  /* STM: 8 */ init_dct ($_main_samplesPerPacket);
__declaration_4__  /* STM: 8 */ init_dct ($_main_samplesPerPacket);
opt__inLineComment  /* STM: 8 */
inLineComment  /* STM: 8 */
decl_specifiers  init_dct ($_main_samplesPerPacket)
repeat_0_decl_qualifier_or_type_specifier  init_dct ($_main_samplesPerPacket)
decl_qualifier_or_type_specifier  init_dct ($_main_samplesPerPacket)
__decl_qualifier_or_type_specifier_1__  init_dct ($_main_samplesPerPacket)
not__asm_spec  
TXL_NOT_  
macro_specifier  init_dct ($_main_samplesPerPacket)
macro_call  init_dct ($_main_samplesPerPacket)
macro_name  init_dct
id  init_dct
*literal  (
macro_arguments  $_main_samplesPerPacket
repeat_0_macro_argument  $_main_samplesPerPacket
macro_argument  $_main_samplesPerPacket
__macro_argument_2__  $_main_samplesPerPacket
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_main_samplesPerPacket
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket); //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket);
statement  /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket);
__statement_2__  /* STM: 9 */ $_main_dbuf = malloc ($_main_bytesPerPacket);
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 9 */
inLineComment  /* STM: 9 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_dbuf = malloc ($_main_bytesPerPacket);
c_unlabeled_statement  $_main_dbuf = malloc ($_main_bytesPerPacket);
__c_unlabeled_statement_1__  $_main_dbuf = malloc ($_main_bytesPerPacket);
simple_statement  $_main_dbuf = malloc ($_main_bytesPerPacket)
expression_statement  $_main_dbuf = malloc ($_main_bytesPerPacket)
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_dbuf
conditional_expression  $_main_dbuf
logical_OR_expression  $_main_dbuf
logical_AND_expression  $_main_dbuf
inclusive_OR_expression  $_main_dbuf
exclusive_OR_expression  $_main_dbuf
AND_expression  $_main_dbuf
equality_expression  $_main_dbuf
relational_expression  $_main_dbuf
shift_expression  $_main_dbuf
additive_expression  $_main_dbuf
multiplicative_expression  $_main_dbuf
cast_expression  $_main_dbuf
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_dbuf
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_dbuf
postfix_expression  $_main_dbuf
primary  $_main_dbuf
reference_id  $_main_dbuf
id  $_main_dbuf
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = malloc ($_main_bytesPerPacket)
assign_assignment_expression  = malloc ($_main_bytesPerPacket)
assignment_operator  =
*literal  =
assignment_expression  malloc ($_main_bytesPerPacket)
conditional_expression  malloc ($_main_bytesPerPacket)
logical_OR_expression  malloc ($_main_bytesPerPacket)
logical_AND_expression  malloc ($_main_bytesPerPacket)
inclusive_OR_expression  malloc ($_main_bytesPerPacket)
exclusive_OR_expression  malloc ($_main_bytesPerPacket)
AND_expression  malloc ($_main_bytesPerPacket)
equality_expression  malloc ($_main_bytesPerPacket)
relational_expression  malloc ($_main_bytesPerPacket)
shift_expression  malloc ($_main_bytesPerPacket)
additive_expression  malloc ($_main_bytesPerPacket)
multiplicative_expression  malloc ($_main_bytesPerPacket)
cast_expression  malloc ($_main_bytesPerPacket)
repeat_0_cast_operator  
empty  
empty  
unary_expression  malloc ($_main_bytesPerPacket)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  malloc ($_main_bytesPerPacket)
postfix_expression  malloc ($_main_bytesPerPacket)
primary  malloc
reference_id  malloc
id  malloc
SPOFF  
repeat_0_postfix_extension   ($_main_bytesPerPacket)
postfix_extension   ($_main_bytesPerPacket)
__postfix_extension_2__   ($_main_bytesPerPacket)
SP   
*literal  (
SPON  
list_0_argument_expression  $_main_bytesPerPacket
argument_expression  $_main_bytesPerPacket
__argument_expression_1__  $_main_bytesPerPacket
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_bytesPerPacket
conditional_expression  $_main_bytesPerPacket
logical_OR_expression  $_main_bytesPerPacket
logical_AND_expression  $_main_bytesPerPacket
inclusive_OR_expression  $_main_bytesPerPacket
exclusive_OR_expression  $_main_bytesPerPacket
AND_expression  $_main_bytesPerPacket
equality_expression  $_main_bytesPerPacket
relational_expression  $_main_bytesPerPacket
shift_expression  $_main_bytesPerPacket
additive_expression  $_main_bytesPerPacket
multiplicative_expression  $_main_bytesPerPacket
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {} /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {}
commentLine  //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {}
commentToken  //COMPOUND START: for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
declaration_or_statement  /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
statement  /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
__statement_2__  /* COMPOUND: 2 */ for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 2 */
inLineComment  /* COMPOUND: 2 */
repeat_0_label  
empty  
empty  
unlabeled_statement  for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
c_unlabeled_statement  for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
structured_statement  for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
for_statement  for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
__for_statement_1__  for ($_main_i = 0; $_main_i < $_main_filesize / $_main_bytesPerPacket; $_main_i++) {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
*literal  for
*literal  (
opt__expression_list  $_main_i = 0
expression_list  $_main_i = 0
list_0_expression  $_main_i = 0
expression  $_main_i = 0
assignment_expression  $_main_i = 0
__assignment_expression_1__  $_main_i = 0
unary_expression_assign  $_main_i =
unary_expression  $_main_i
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_i
postfix_expression  $_main_i
primary  $_main_i
reference_id  $_main_i
id  $_main_i
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
assignment_operator  =
*literal  =
assignment_expression  0
conditional_expression  0
logical_OR_expression  0
logical_AND_expression  0
inclusive_OR_expression  0
exclusive_OR_expression  0
AND_expression  0
equality_expression  0
relational_expression  0
shift_expression  0
additive_expression  0
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
*literal  ;
opt__expression_list  $_main_i < $_main_filesize / $_main_bytesPerPacket
expression_list  $_main_i < $_main_filesize / $_main_bytesPerPacket
list_0_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
assignment_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
conditional_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
logical_OR_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
logical_AND_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
inclusive_OR_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
exclusive_OR_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
AND_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
equality_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
relational_expression  $_main_i < $_main_filesize / $_main_bytesPerPacket
shift_expression  $_main_i
additive_expression  $_main_i
multiplicative_expression  $_main_i
cast_expression  $_main_i
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_i
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_i
postfix_expression  $_main_i
primary  $_main_i
reference_id  $_main_i
id  $_main_i
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  < $_main_filesize / $_main_bytesPerPacket
relational_shift_expression  < $_main_filesize / $_main_bytesPerPacket
relational_operator  <
*literal  <
shift_expression  $_main_filesize / $_main_bytesPerPacket
additive_expression  $_main_filesize / $_main_bytesPerPacket
multiplicative_expression  $_main_filesize / $_main_bytesPerPacket
cast_expression  $_main_filesize
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_filesize
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_filesize
postfix_expression  $_main_filesize
primary  $_main_filesize
reference_id  $_main_filesize
id  $_main_filesize
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  / $_main_bytesPerPacket
multipy_divide_cast_expression  / $_main_bytesPerPacket
multiplicative_operator  /
*literal  /
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
*literal  ;
opt__expression_list  $_main_i++
expression_list  $_main_i++
list_0_expression  $_main_i++
expression  $_main_i++
assignment_expression  $_main_i++
conditional_expression  $_main_i++
logical_OR_expression  $_main_i++
logical_AND_expression  $_main_i++
inclusive_OR_expression  $_main_i++
exclusive_OR_expression  $_main_i++
AND_expression  $_main_i++
equality_expression  $_main_i++
relational_expression  $_main_i++
shift_expression  $_main_i++
additive_expression  $_main_i++
multiplicative_expression  $_main_i++
cast_expression  $_main_i++
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_i++
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_i++
postfix_expression  $_main_i++
primary  $_main_i
reference_id  $_main_i
id  $_main_i
SPOFF  
repeat_0_postfix_extension  ++
postfix_extension  ++
*literal  ++
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
*literal  )
sub_statement  {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
compound_statement  {/* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}}
*literal  {
IN  
NL  
compound_statement_body  /* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
repeat_0_declaration_or_statement  /* STM: 10 */ printf ("%d ", $_main_i); /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* STM: 10 */ printf ("%d ", $_main_i);
declaration  /* STM: 10 */ printf ("%d ", $_main_i);
__declaration_4__  /* STM: 10 */ printf ("%d ", $_main_i);
opt__inLineComment  /* STM: 10 */
inLineComment  /* STM: 10 */
decl_specifiers  printf ("%d ", $_main_i)
repeat_0_decl_qualifier_or_type_specifier  printf ("%d ", $_main_i)
decl_qualifier_or_type_specifier  printf ("%d ", $_main_i)
__decl_qualifier_or_type_specifier_1__  printf ("%d ", $_main_i)
not__asm_spec  
TXL_NOT_  
macro_specifier  printf ("%d ", $_main_i)
macro_call  printf ("%d ", $_main_i)
macro_name  printf
id  printf
*literal  (
macro_arguments  "%d ", $_main_i
repeat_0_macro_argument  "%d ", $_main_i
macro_argument  "%d "
__macro_argument_2__  "%d "
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
stringlit  "%d "
repeat_0_macro_argument  , $_main_i
macro_argument  ,
__macro_argument_2__  ,
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
*literal  ,
repeat_0_macro_argument  $_main_i
macro_argument  $_main_i
__macro_argument_2__  $_main_i
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_main_i
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 11 */ fflush (stdout); /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* STM: 11 */ fflush (stdout);
declaration  /* STM: 11 */ fflush (stdout);
__declaration_4__  /* STM: 11 */ fflush (stdout);
opt__inLineComment  /* STM: 11 */
inLineComment  /* STM: 11 */
decl_specifiers  fflush (stdout)
repeat_0_decl_qualifier_or_type_specifier  fflush (stdout)
decl_qualifier_or_type_specifier  fflush (stdout)
__decl_qualifier_or_type_specifier_1__  fflush (stdout)
not__asm_spec  
TXL_NOT_  
macro_specifier  fflush (stdout)
macro_call  fflush (stdout)
macro_name  fflush
id  fflush
*literal  (
macro_arguments  stdout
repeat_0_macro_argument  stdout
macro_argument  stdout
__macro_argument_2__  stdout
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  stdout
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile); //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile);
statement  /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile);
__statement_2__  /* STM: 12 */ $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile);
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 12 */
inLineComment  /* STM: 12 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile);
c_unlabeled_statement  $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile);
__c_unlabeled_statement_1__  $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile);
simple_statement  $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
expression_statement  $_main_size = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_main_size
conditional_expression  $_main_size
logical_OR_expression  $_main_size
logical_AND_expression  $_main_size
inclusive_OR_expression  $_main_size
exclusive_OR_expression  $_main_size
AND_expression  $_main_size
equality_expression  $_main_size
relational_expression  $_main_size
shift_expression  $_main_size
additive_expression  $_main_size
multiplicative_expression  $_main_size
cast_expression  $_main_size
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_size
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_size
postfix_expression  $_main_size
primary  $_main_size
reference_id  $_main_size
id  $_main_size
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
assign_assignment_expression  = fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
assignment_operator  =
*literal  =
assignment_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
conditional_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
logical_OR_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
logical_AND_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
inclusive_OR_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
exclusive_OR_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
AND_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
equality_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
relational_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
shift_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
additive_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
multiplicative_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
cast_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
repeat_0_cast_operator  
empty  
empty  
unary_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
postfix_expression  fread ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
primary  fread
reference_id  fread
id  fread
SPOFF  
repeat_0_postfix_extension   ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
postfix_extension   ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
__postfix_extension_2__   ($_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile)
SP   
*literal  (
SPON  
list_0_argument_expression  $_main_dbuf, 1, $_main_bytesPerPacket, $_main_ifile
argument_expression  $_main_dbuf
__argument_expression_1__  $_main_dbuf
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_dbuf
conditional_expression  $_main_dbuf
logical_OR_expression  $_main_dbuf
logical_AND_expression  $_main_dbuf
inclusive_OR_expression  $_main_dbuf
exclusive_OR_expression  $_main_dbuf
AND_expression  $_main_dbuf
equality_expression  $_main_dbuf
relational_expression  $_main_dbuf
shift_expression  $_main_dbuf
additive_expression  $_main_dbuf
multiplicative_expression  $_main_dbuf
cast_expression  $_main_dbuf
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_dbuf
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_dbuf
postfix_expression  $_main_dbuf
primary  $_main_dbuf
reference_id  $_main_dbuf
id  $_main_dbuf
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  1, $_main_bytesPerPacket, $_main_ifile
argument_expression  1
__argument_expression_1__  1
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  1
conditional_expression  1
logical_OR_expression  1
logical_AND_expression  1
inclusive_OR_expression  1
exclusive_OR_expression  1
AND_expression  1
equality_expression  1
relational_expression  1
shift_expression  1
additive_expression  1
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  $_main_bytesPerPacket, $_main_ifile
argument_expression  $_main_bytesPerPacket
__argument_expression_1__  $_main_bytesPerPacket
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_bytesPerPacket
conditional_expression  $_main_bytesPerPacket
logical_OR_expression  $_main_bytesPerPacket
logical_AND_expression  $_main_bytesPerPacket
inclusive_OR_expression  $_main_bytesPerPacket
exclusive_OR_expression  $_main_bytesPerPacket
AND_expression  $_main_bytesPerPacket
equality_expression  $_main_bytesPerPacket
relational_expression  $_main_bytesPerPacket
shift_expression  $_main_bytesPerPacket
additive_expression  $_main_bytesPerPacket
multiplicative_expression  $_main_bytesPerPacket
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  $_main_ifile
argument_expression  $_main_ifile
__argument_expression_1__  $_main_ifile
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_main_ifile
conditional_expression  $_main_ifile
logical_OR_expression  $_main_ifile
logical_AND_expression  $_main_ifile
inclusive_OR_expression  $_main_ifile
exclusive_OR_expression  $_main_ifile
AND_expression  $_main_ifile
equality_expression  $_main_ifile
relational_expression  $_main_ifile
shift_expression  $_main_ifile
additive_expression  $_main_ifile
multiplicative_expression  $_main_ifile
cast_expression  $_main_ifile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ifile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ifile
postfix_expression  $_main_ifile
primary  $_main_ifile
reference_id  $_main_ifile
id  $_main_ifile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {} /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {}
commentLine  //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {}
commentToken  //COMPOUND START: if ($_main_size < $_main_bytesPerPacket) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */} //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
statement  /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
__statement_2__  /* COMPOUND: 3 */ if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 3 */
inLineComment  /* COMPOUND: 3 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
c_unlabeled_statement  if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
structured_statement  if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
if_statement  if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
__if_statement_1__  if ($_main_size < $_main_bytesPerPacket) {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
*literal  if
*literal  (
expression_list  $_main_size < $_main_bytesPerPacket
list_0_expression  $_main_size < $_main_bytesPerPacket
expression  $_main_size < $_main_bytesPerPacket
assignment_expression  $_main_size < $_main_bytesPerPacket
conditional_expression  $_main_size < $_main_bytesPerPacket
logical_OR_expression  $_main_size < $_main_bytesPerPacket
logical_AND_expression  $_main_size < $_main_bytesPerPacket
inclusive_OR_expression  $_main_size < $_main_bytesPerPacket
exclusive_OR_expression  $_main_size < $_main_bytesPerPacket
AND_expression  $_main_size < $_main_bytesPerPacket
equality_expression  $_main_size < $_main_bytesPerPacket
relational_expression  $_main_size < $_main_bytesPerPacket
shift_expression  $_main_size
additive_expression  $_main_size
multiplicative_expression  $_main_size
cast_expression  $_main_size
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_size
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_size
postfix_expression  $_main_size
primary  $_main_size
reference_id  $_main_size
id  $_main_size
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  < $_main_bytesPerPacket
relational_shift_expression  < $_main_bytesPerPacket
relational_operator  <
*literal  <
shift_expression  $_main_bytesPerPacket
additive_expression  $_main_bytesPerPacket
multiplicative_expression  $_main_bytesPerPacket
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
compound_statement  {/* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0); /* COMPOUND: 3 */}
*literal  {
IN  
NL  
compound_statement_body  /* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0);
repeat_0_declaration_or_statement  /* STM: 13 */ printf ("EOF\n"); /* STM: 14 */ exit (0);
declaration_or_statement  /* STM: 13 */ printf ("EOF\n");
declaration  /* STM: 13 */ printf ("EOF\n");
__declaration_4__  /* STM: 13 */ printf ("EOF\n");
opt__inLineComment  /* STM: 13 */
inLineComment  /* STM: 13 */
decl_specifiers  printf ("EOF\n")
repeat_0_decl_qualifier_or_type_specifier  printf ("EOF\n")
decl_qualifier_or_type_specifier  printf ("EOF\n")
__decl_qualifier_or_type_specifier_1__  printf ("EOF\n")
not__asm_spec  
TXL_NOT_  
macro_specifier  printf ("EOF\n")
macro_call  printf ("EOF\n")
macro_name  printf
id  printf
*literal  (
macro_arguments  "EOF\n"
repeat_0_macro_argument  "EOF\n"
macro_argument  "EOF\n"
__macro_argument_2__  "EOF\n"
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
stringlit  "EOF\n"
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 14 */ exit (0);
declaration_or_statement  /* STM: 14 */ exit (0);
declaration  /* STM: 14 */ exit (0);
__declaration_4__  /* STM: 14 */ exit (0);
opt__inLineComment  /* STM: 14 */
inLineComment  /* STM: 14 */
decl_specifiers  exit (0)
repeat_0_decl_qualifier_or_type_specifier  exit (0)
decl_qualifier_or_type_specifier  exit (0)
__decl_qualifier_or_type_specifier_1__  exit (0)
not__asm_spec  
TXL_NOT_  
macro_specifier  exit (0)
macro_call  exit (0)
macro_name  exit
id  exit
*literal  (
macro_arguments  0
repeat_0_macro_argument  0
macro_argument  0
__macro_argument_2__  0
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
number  0
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  /* COMPOUND: 3 */
inLineComment  /* COMPOUND: 3 */
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {} /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {}
commentLine  //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {}
commentToken  //COMPOUND END: if ($_main_size < $_main_bytesPerPacket) {}
NL  
repeat_0_declaration_or_statement  /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno; /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno;
declaration  /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno;
__declaration_4__  /* DECL: 10 */ int $_send_packet_seqno1 = $_main_seqno;
opt__inLineComment  /* DECL: 10 */
inLineComment  /* DECL: 10 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_send_packet_seqno1 = $_main_seqno
init_declarator  $_send_packet_seqno1 = $_main_seqno
declarator  $_send_packet_seqno1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_send_packet_seqno1
reference_id  $_send_packet_seqno1
id  $_send_packet_seqno1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_main_seqno
initialization  = $_main_seqno
__initialization_1__  = $_main_seqno
opt__initdata  
empty  
*literal  =
initializer  $_main_seqno
__initializer_1__  $_main_seqno
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_main_seqno
initializer_unit  $_main_seqno
assignment_expression  $_main_seqno
conditional_expression  $_main_seqno
logical_OR_expression  $_main_seqno
logical_AND_expression  $_main_seqno
inclusive_OR_expression  $_main_seqno
exclusive_OR_expression  $_main_seqno
AND_expression  $_main_seqno
equality_expression  $_main_seqno
relational_expression  $_main_seqno
shift_expression  $_main_seqno
additive_expression  $_main_seqno
multiplicative_expression  $_main_seqno
cast_expression  $_main_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_seqno
postfix_expression  $_main_seqno
primary  $_main_seqno
reference_id  $_main_seqno
id  $_main_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket; /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket;
declaration  /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket;
__declaration_4__  /* DECL: 11 */ int $_send_packet_len1 = $_main_bytesPerPacket;
opt__inLineComment  /* DECL: 11 */
inLineComment  /* DECL: 11 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_send_packet_len1 = $_main_bytesPerPacket
init_declarator  $_send_packet_len1 = $_main_bytesPerPacket
declarator  $_send_packet_len1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_send_packet_len1
reference_id  $_send_packet_len1
id  $_send_packet_len1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_main_bytesPerPacket
initialization  = $_main_bytesPerPacket
__initialization_1__  = $_main_bytesPerPacket
opt__initdata  
empty  
*literal  =
initializer  $_main_bytesPerPacket
__initializer_1__  $_main_bytesPerPacket
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_main_bytesPerPacket
initializer_unit  $_main_bytesPerPacket
assignment_expression  $_main_bytesPerPacket
conditional_expression  $_main_bytesPerPacket
logical_OR_expression  $_main_bytesPerPacket
logical_AND_expression  $_main_bytesPerPacket
inclusive_OR_expression  $_main_bytesPerPacket
exclusive_OR_expression  $_main_bytesPerPacket
AND_expression  $_main_bytesPerPacket
equality_expression  $_main_bytesPerPacket
relational_expression  $_main_bytesPerPacket
shift_expression  $_main_bytesPerPacket
additive_expression  $_main_bytesPerPacket
multiplicative_expression  $_main_bytesPerPacket
cast_expression  $_main_bytesPerPacket
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_bytesPerPacket
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_bytesPerPacket
postfix_expression  $_main_bytesPerPacket
primary  $_main_bytesPerPacket
reference_id  $_main_bytesPerPacket
id  $_main_bytesPerPacket
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf; /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf;
declaration  /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf;
__declaration_4__  /* DECL: 12 */ char *$_send_packet_data1 = $_main_dbuf;
opt__inLineComment  /* DECL: 12 */
inLineComment  /* DECL: 12 */
decl_specifiers  char
repeat_0_decl_qualifier_or_type_specifier  char
decl_qualifier_or_type_specifier  char
type_specifier  char
simple_type_name  char
*literal  char
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_send_packet_data1 = $_main_dbuf
init_declarator  *$_send_packet_data1 = $_main_dbuf
declarator  *$_send_packet_data1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_send_packet_data1
reference_id  $_send_packet_data1
id  $_send_packet_data1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_main_dbuf
initialization  = $_main_dbuf
__initialization_1__  = $_main_dbuf
opt__initdata  
empty  
*literal  =
initializer  $_main_dbuf
__initializer_1__  $_main_dbuf
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_main_dbuf
initializer_unit  $_main_dbuf
assignment_expression  $_main_dbuf
conditional_expression  $_main_dbuf
logical_OR_expression  $_main_dbuf
logical_AND_expression  $_main_dbuf
inclusive_OR_expression  $_main_dbuf
exclusive_OR_expression  $_main_dbuf
AND_expression  $_main_dbuf
equality_expression  $_main_dbuf
relational_expression  $_main_dbuf
shift_expression  $_main_dbuf
additive_expression  $_main_dbuf
multiplicative_expression  $_main_dbuf
cast_expression  $_main_dbuf
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_dbuf
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_dbuf
postfix_expression  $_main_dbuf
primary  $_main_dbuf
reference_id  $_main_dbuf
id  $_main_dbuf
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile; /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile;
declaration  /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile;
__declaration_4__  /* DECL: 13 */ FILE *$_send_packet_ofile1 = $_main_ofile;
opt__inLineComment  /* DECL: 13 */
inLineComment  /* DECL: 13 */
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_send_packet_ofile1 = $_main_ofile
init_declarator  *$_send_packet_ofile1 = $_main_ofile
declarator  *$_send_packet_ofile1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_send_packet_ofile1
reference_id  $_send_packet_ofile1
id  $_send_packet_ofile1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_main_ofile
initialization  = $_main_ofile
__initialization_1__  = $_main_ofile
opt__initdata  
empty  
*literal  =
initializer  $_main_ofile
__initializer_1__  $_main_ofile
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_main_ofile
initializer_unit  $_main_ofile
assignment_expression  $_main_ofile
conditional_expression  $_main_ofile
logical_OR_expression  $_main_ofile
logical_AND_expression  $_main_ofile
inclusive_OR_expression  $_main_ofile
exclusive_OR_expression  $_main_ofile
AND_expression  $_main_ofile
equality_expression  $_main_ofile
relational_expression  $_main_ofile
shift_expression  $_main_ofile
additive_expression  $_main_ofile
multiplicative_expression  $_main_ofile
cast_expression  $_main_ofile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_ofile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_ofile
postfix_expression  $_main_ofile
primary  $_main_ofile
reference_id  $_main_ofile
id  $_main_ofile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy; //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy;
declaration  /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy;
__declaration_4__  /* DECL: 14 */ int $_send_packet_repair_strategy1 = $_main_strategy;
opt__inLineComment  /* DECL: 14 */
inLineComment  /* DECL: 14 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_send_packet_repair_strategy1 = $_main_strategy
init_declarator  $_send_packet_repair_strategy1 = $_main_strategy
declarator  $_send_packet_repair_strategy1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_send_packet_repair_strategy1
reference_id  $_send_packet_repair_strategy1
id  $_send_packet_repair_strategy1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_main_strategy
initialization  = $_main_strategy
__initialization_1__  = $_main_strategy
opt__initdata  
empty  
*literal  =
initializer  $_main_strategy
__initializer_1__  $_main_strategy
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_main_strategy
initializer_unit  $_main_strategy
assignment_expression  $_main_strategy
conditional_expression  $_main_strategy
logical_OR_expression  $_main_strategy
logical_AND_expression  $_main_strategy
inclusive_OR_expression  $_main_strategy
exclusive_OR_expression  $_main_strategy
AND_expression  $_main_strategy
equality_expression  $_main_strategy
relational_expression  $_main_strategy
shift_expression  $_main_strategy
additive_expression  $_main_strategy
multiplicative_expression  $_main_strategy
cast_expression  $_main_strategy
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_main_strategy
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_main_strategy
postfix_expression  $_main_strategy
primary  $_main_strategy
reference_id  $_main_strategy
id  $_main_strategy
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy); /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy);
commentLine  //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy);
commentToken  //Mappings for function: send_packet ($_main_seqno ++, $_main_bytesPerPacket, $_main_dbuf, $_main_ofile, $_main_strategy);
NL  
repeat_0_declaration_or_statement  /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1); /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1);
declaration  /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1);
__declaration_4__  /* DECL: 15 */ char *$_send_packet_pktbuf = malloc ($_send_packet_len1);
opt__inLineComment  /* DECL: 15 */
inLineComment  /* DECL: 15 */
decl_specifiers  char
repeat_0_decl_qualifier_or_type_specifier  char
decl_qualifier_or_type_specifier  char
type_specifier  char
simple_type_name  char
*literal  char
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_send_packet_pktbuf = malloc ($_send_packet_len1)
init_declarator  *$_send_packet_pktbuf = malloc ($_send_packet_len1)
declarator  *$_send_packet_pktbuf
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_send_packet_pktbuf
reference_id  $_send_packet_pktbuf
id  $_send_packet_pktbuf
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = malloc ($_send_packet_len1)
initialization  = malloc ($_send_packet_len1)
__initialization_1__  = malloc ($_send_packet_len1)
opt__initdata  
empty  
*literal  =
initializer  malloc ($_send_packet_len1)
__initializer_1__  malloc ($_send_packet_len1)
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  malloc ($_send_packet_len1)
initializer_unit  malloc ($_send_packet_len1)
assignment_expression  malloc ($_send_packet_len1)
conditional_expression  malloc ($_send_packet_len1)
logical_OR_expression  malloc ($_send_packet_len1)
logical_AND_expression  malloc ($_send_packet_len1)
inclusive_OR_expression  malloc ($_send_packet_len1)
exclusive_OR_expression  malloc ($_send_packet_len1)
AND_expression  malloc ($_send_packet_len1)
equality_expression  malloc ($_send_packet_len1)
relational_expression  malloc ($_send_packet_len1)
shift_expression  malloc ($_send_packet_len1)
additive_expression  malloc ($_send_packet_len1)
multiplicative_expression  malloc ($_send_packet_len1)
cast_expression  malloc ($_send_packet_len1)
repeat_0_cast_operator  
empty  
empty  
unary_expression  malloc ($_send_packet_len1)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  malloc ($_send_packet_len1)
postfix_expression  malloc ($_send_packet_len1)
primary  malloc
reference_id  malloc
id  malloc
SPOFF  
repeat_0_postfix_extension   ($_send_packet_len1)
postfix_extension   ($_send_packet_len1)
__postfix_extension_2__   ($_send_packet_len1)
SP   
*literal  (
SPON  
list_0_argument_expression  $_send_packet_len1
argument_expression  $_send_packet_len1
__argument_expression_1__  $_send_packet_len1
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_send_packet_len1
conditional_expression  $_send_packet_len1
logical_OR_expression  $_send_packet_len1
logical_AND_expression  $_send_packet_len1
inclusive_OR_expression  $_send_packet_len1
exclusive_OR_expression  $_send_packet_len1
AND_expression  $_send_packet_len1
equality_expression  $_send_packet_len1
relational_expression  $_send_packet_len1
shift_expression  $_send_packet_len1
additive_expression  $_send_packet_len1
multiplicative_expression  $_send_packet_len1
cast_expression  $_send_packet_len1
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_send_packet_len1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_send_packet_len1
postfix_expression  $_send_packet_len1
primary  $_send_packet_len1
reference_id  $_send_packet_len1
id  $_send_packet_len1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1); /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1);
declaration  /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1);
__declaration_4__  /* STM: 15 */ memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1);
opt__inLineComment  /* STM: 15 */
inLineComment  /* STM: 15 */
decl_specifiers  memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1)
repeat_0_decl_qualifier_or_type_specifier  memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1)
decl_qualifier_or_type_specifier  memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1)
__decl_qualifier_or_type_specifier_1__  memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1)
not__asm_spec  
TXL_NOT_  
macro_specifier  memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1)
macro_call  memcpy ($_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1)
macro_name  memcpy
id  memcpy
*literal  (
macro_arguments  $_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1
repeat_0_macro_argument  $_send_packet_pktbuf, $_send_packet_data1, $_send_packet_len1
macro_argument  $_send_packet_pktbuf
__macro_argument_2__  $_send_packet_pktbuf
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_send_packet_pktbuf
repeat_0_macro_argument  , $_send_packet_data1, $_send_packet_len1
macro_argument  ,
__macro_argument_2__  ,
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
*literal  ,
repeat_0_macro_argument  $_send_packet_data1, $_send_packet_len1
macro_argument  $_send_packet_data1
__macro_argument_2__  $_send_packet_data1
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_send_packet_data1
repeat_0_macro_argument  , $_send_packet_len1
macro_argument  ,
__macro_argument_2__  ,
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
*literal  ,
repeat_0_macro_argument  $_send_packet_len1
macro_argument  $_send_packet_len1
__macro_argument_2__  $_send_packet_len1
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_send_packet_len1
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno; /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno;
declaration  /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno;
__declaration_4__  /* DECL: 16 */ int $_transmit_packet_seqno1 = $_send_packet_seqno;
opt__inLineComment  /* DECL: 16 */
inLineComment  /* DECL: 16 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_transmit_packet_seqno1 = $_send_packet_seqno
init_declarator  $_transmit_packet_seqno1 = $_send_packet_seqno
declarator  $_transmit_packet_seqno1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_transmit_packet_seqno1
reference_id  $_transmit_packet_seqno1
id  $_transmit_packet_seqno1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_send_packet_seqno
initialization  = $_send_packet_seqno
__initialization_1__  = $_send_packet_seqno
opt__initdata  
empty  
*literal  =
initializer  $_send_packet_seqno
__initializer_1__  $_send_packet_seqno
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_send_packet_seqno
initializer_unit  $_send_packet_seqno
assignment_expression  $_send_packet_seqno
conditional_expression  $_send_packet_seqno
logical_OR_expression  $_send_packet_seqno
logical_AND_expression  $_send_packet_seqno
inclusive_OR_expression  $_send_packet_seqno
exclusive_OR_expression  $_send_packet_seqno
AND_expression  $_send_packet_seqno
equality_expression  $_send_packet_seqno
relational_expression  $_send_packet_seqno
shift_expression  $_send_packet_seqno
additive_expression  $_send_packet_seqno
multiplicative_expression  $_send_packet_seqno
cast_expression  $_send_packet_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_send_packet_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_send_packet_seqno
postfix_expression  $_send_packet_seqno
primary  $_send_packet_seqno
reference_id  $_send_packet_seqno
id  $_send_packet_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len; /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len;
declaration  /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len;
__declaration_4__  /* DECL: 17 */ int $_transmit_packet_len1 = $_send_packet_len;
opt__inLineComment  /* DECL: 17 */
inLineComment  /* DECL: 17 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_transmit_packet_len1 = $_send_packet_len
init_declarator  $_transmit_packet_len1 = $_send_packet_len
declarator  $_transmit_packet_len1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_transmit_packet_len1
reference_id  $_transmit_packet_len1
id  $_transmit_packet_len1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_send_packet_len
initialization  = $_send_packet_len
__initialization_1__  = $_send_packet_len
opt__initdata  
empty  
*literal  =
initializer  $_send_packet_len
__initializer_1__  $_send_packet_len
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_send_packet_len
initializer_unit  $_send_packet_len
assignment_expression  $_send_packet_len
conditional_expression  $_send_packet_len
logical_OR_expression  $_send_packet_len
logical_AND_expression  $_send_packet_len
inclusive_OR_expression  $_send_packet_len
exclusive_OR_expression  $_send_packet_len
AND_expression  $_send_packet_len
equality_expression  $_send_packet_len
relational_expression  $_send_packet_len
shift_expression  $_send_packet_len
additive_expression  $_send_packet_len
multiplicative_expression  $_send_packet_len
cast_expression  $_send_packet_len
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_send_packet_len
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_send_packet_len
postfix_expression  $_send_packet_len
primary  $_send_packet_len
reference_id  $_send_packet_len
id  $_send_packet_len
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf; /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf;
declaration  /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf;
__declaration_4__  /* DECL: 18 */ char *$_transmit_packet_data1 = $_send_packet_pktbuf;
opt__inLineComment  /* DECL: 18 */
inLineComment  /* DECL: 18 */
decl_specifiers  char
repeat_0_decl_qualifier_or_type_specifier  char
decl_qualifier_or_type_specifier  char
type_specifier  char
simple_type_name  char
*literal  char
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_transmit_packet_data1 = $_send_packet_pktbuf
init_declarator  *$_transmit_packet_data1 = $_send_packet_pktbuf
declarator  *$_transmit_packet_data1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_transmit_packet_data1
reference_id  $_transmit_packet_data1
id  $_transmit_packet_data1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_send_packet_pktbuf
initialization  = $_send_packet_pktbuf
__initialization_1__  = $_send_packet_pktbuf
opt__initdata  
empty  
*literal  =
initializer  $_send_packet_pktbuf
__initializer_1__  $_send_packet_pktbuf
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_send_packet_pktbuf
initializer_unit  $_send_packet_pktbuf
assignment_expression  $_send_packet_pktbuf
conditional_expression  $_send_packet_pktbuf
logical_OR_expression  $_send_packet_pktbuf
logical_AND_expression  $_send_packet_pktbuf
inclusive_OR_expression  $_send_packet_pktbuf
exclusive_OR_expression  $_send_packet_pktbuf
AND_expression  $_send_packet_pktbuf
equality_expression  $_send_packet_pktbuf
relational_expression  $_send_packet_pktbuf
shift_expression  $_send_packet_pktbuf
additive_expression  $_send_packet_pktbuf
multiplicative_expression  $_send_packet_pktbuf
cast_expression  $_send_packet_pktbuf
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_send_packet_pktbuf
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_send_packet_pktbuf
postfix_expression  $_send_packet_pktbuf
primary  $_send_packet_pktbuf
reference_id  $_send_packet_pktbuf
id  $_send_packet_pktbuf
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile; /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile;
declaration  /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile;
__declaration_4__  /* DECL: 19 */ FILE *$_transmit_packet_ofile1 = $_send_packet_ofile;
opt__inLineComment  /* DECL: 19 */
inLineComment  /* DECL: 19 */
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_transmit_packet_ofile1 = $_send_packet_ofile
init_declarator  *$_transmit_packet_ofile1 = $_send_packet_ofile
declarator  *$_transmit_packet_ofile1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_transmit_packet_ofile1
reference_id  $_transmit_packet_ofile1
id  $_transmit_packet_ofile1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_send_packet_ofile
initialization  = $_send_packet_ofile
__initialization_1__  = $_send_packet_ofile
opt__initdata  
empty  
*literal  =
initializer  $_send_packet_ofile
__initializer_1__  $_send_packet_ofile
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_send_packet_ofile
initializer_unit  $_send_packet_ofile
assignment_expression  $_send_packet_ofile
conditional_expression  $_send_packet_ofile
logical_OR_expression  $_send_packet_ofile
logical_AND_expression  $_send_packet_ofile
inclusive_OR_expression  $_send_packet_ofile
exclusive_OR_expression  $_send_packet_ofile
AND_expression  $_send_packet_ofile
equality_expression  $_send_packet_ofile
relational_expression  $_send_packet_ofile
shift_expression  $_send_packet_ofile
additive_expression  $_send_packet_ofile
multiplicative_expression  $_send_packet_ofile
cast_expression  $_send_packet_ofile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_send_packet_ofile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_send_packet_ofile
postfix_expression  $_send_packet_ofile
primary  $_send_packet_ofile
reference_id  $_send_packet_ofile
id  $_send_packet_ofile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy; //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy;
declaration  /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy;
__declaration_4__  /* DECL: 20 */ int $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy;
opt__inLineComment  /* DECL: 20 */
inLineComment  /* DECL: 20 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy
init_declarator  $_transmit_packet_repair_strategy1 = $_send_packet_repair_strategy
declarator  $_transmit_packet_repair_strategy1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_transmit_packet_repair_strategy1
reference_id  $_transmit_packet_repair_strategy1
id  $_transmit_packet_repair_strategy1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_send_packet_repair_strategy
initialization  = $_send_packet_repair_strategy
__initialization_1__  = $_send_packet_repair_strategy
opt__initdata  
empty  
*literal  =
initializer  $_send_packet_repair_strategy
__initializer_1__  $_send_packet_repair_strategy
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_send_packet_repair_strategy
initializer_unit  $_send_packet_repair_strategy
assignment_expression  $_send_packet_repair_strategy
conditional_expression  $_send_packet_repair_strategy
logical_OR_expression  $_send_packet_repair_strategy
logical_AND_expression  $_send_packet_repair_strategy
inclusive_OR_expression  $_send_packet_repair_strategy
exclusive_OR_expression  $_send_packet_repair_strategy
AND_expression  $_send_packet_repair_strategy
equality_expression  $_send_packet_repair_strategy
relational_expression  $_send_packet_repair_strategy
shift_expression  $_send_packet_repair_strategy
additive_expression  $_send_packet_repair_strategy
multiplicative_expression  $_send_packet_repair_strategy
cast_expression  $_send_packet_repair_strategy
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_send_packet_repair_strategy
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_send_packet_repair_strategy
postfix_expression  $_send_packet_repair_strategy
primary  $_send_packet_repair_strategy
reference_id  $_send_packet_repair_strategy
id  $_send_packet_repair_strategy
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy); /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy);
commentLine  //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy);
commentToken  //Mappings for function: transmit_packet ($_send_packet_seqno, $_send_packet_len, $_send_packet_pktbuf, $_send_packet_ofile, $_send_packet_repair_strategy);
NL  
repeat_0_declaration_or_statement  /* DECL: 21 */ long $_transmit_packet_r = random (); //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 21 */ long $_transmit_packet_r = random ();
declaration  /* DECL: 21 */ long $_transmit_packet_r = random ();
__declaration_4__  /* DECL: 21 */ long $_transmit_packet_r = random ();
opt__inLineComment  /* DECL: 21 */
inLineComment  /* DECL: 21 */
decl_specifiers  long
repeat_0_decl_qualifier_or_type_specifier  long
decl_qualifier_or_type_specifier  long
decl_qualifier  long
type_qualifier  long
bit_qualifier  long
*literal  long
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_transmit_packet_r = random ()
init_declarator  $_transmit_packet_r = random ()
declarator  $_transmit_packet_r
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_transmit_packet_r
reference_id  $_transmit_packet_r
id  $_transmit_packet_r
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = random ()
initialization  = random ()
__initialization_1__  = random ()
opt__initdata  
empty  
*literal  =
initializer  random ()
__initializer_1__  random ()
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  random ()
initializer_unit  random ()
assignment_expression  random ()
conditional_expression  random ()
logical_OR_expression  random ()
logical_AND_expression  random ()
inclusive_OR_expression  random ()
exclusive_OR_expression  random ()
AND_expression  random ()
equality_expression  random ()
relational_expression  random ()
shift_expression  random ()
additive_expression  random ()
multiplicative_expression  random ()
cast_expression  random ()
repeat_0_cast_operator  
empty  
empty  
unary_expression  random ()
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  random ()
postfix_expression  random ()
primary  random
reference_id  random
id  random
SPOFF  
repeat_0_postfix_extension   ()
postfix_extension   ()
__postfix_extension_2__   ()
SP   
*literal  (
SPON  
list_0_argument_expression  
argument_expression  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {}
commentLine  //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {}
commentToken  //COMPOUND START: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */} //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
statement  /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
__statement_2__  /* COMPOUND: 4 */ if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 4 */
inLineComment  /* COMPOUND: 4 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
c_unlabeled_statement  if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
structured_statement  if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
if_statement  if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
__if_statement_1__  if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
*literal  if
*literal  (
expression_list  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
list_0_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
assignment_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
conditional_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
logical_OR_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
logical_AND_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
inclusive_OR_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
exclusive_OR_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
AND_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
equality_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
relational_expression  ($_transmit_packet_r % 1000000) / 1000000.0 < 0.5
shift_expression  ($_transmit_packet_r % 1000000) / 1000000.0
additive_expression  ($_transmit_packet_r % 1000000) / 1000000.0
multiplicative_expression  ($_transmit_packet_r % 1000000) / 1000000.0
cast_expression  ($_transmit_packet_r % 1000000)
repeat_0_cast_operator  
empty  
empty  
unary_expression  ($_transmit_packet_r % 1000000)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  ($_transmit_packet_r % 1000000)
postfix_expression  ($_transmit_packet_r % 1000000)
primary  ($_transmit_packet_r % 1000000)
__primary_1__  ($_transmit_packet_r % 1000000)
*literal  (
SPON  
expression_list  $_transmit_packet_r % 1000000
list_0_expression  $_transmit_packet_r % 1000000
expression  $_transmit_packet_r % 1000000
assignment_expression  $_transmit_packet_r % 1000000
conditional_expression  $_transmit_packet_r % 1000000
logical_OR_expression  $_transmit_packet_r % 1000000
logical_AND_expression  $_transmit_packet_r % 1000000
inclusive_OR_expression  $_transmit_packet_r % 1000000
exclusive_OR_expression  $_transmit_packet_r % 1000000
AND_expression  $_transmit_packet_r % 1000000
equality_expression  $_transmit_packet_r % 1000000
relational_expression  $_transmit_packet_r % 1000000
shift_expression  $_transmit_packet_r % 1000000
additive_expression  $_transmit_packet_r % 1000000
multiplicative_expression  $_transmit_packet_r % 1000000
cast_expression  $_transmit_packet_r
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_transmit_packet_r
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_transmit_packet_r
postfix_expression  $_transmit_packet_r
primary  $_transmit_packet_r
reference_id  $_transmit_packet_r
id  $_transmit_packet_r
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  % 1000000
multipy_divide_cast_expression  % 1000000
multiplicative_operator  %
*literal  %
cast_expression  1000000
repeat_0_cast_operator  
empty  
empty  
unary_expression  1000000
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1000000
postfix_expression  1000000
primary  1000000
constant  1000000
number  1000000
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
opt__lit__,  
empty  
*literal  )
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  / 1000000.0
multipy_divide_cast_expression  / 1000000.0
multiplicative_operator  /
*literal  /
cast_expression  1000000.0
repeat_0_cast_operator  
empty  
empty  
unary_expression  1000000.0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1000000.0
postfix_expression  1000000.0
primary  1000000.0
constant  1000000.0
float  1000000.0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  < 0.5
relational_shift_expression  < 0.5
relational_operator  <
*literal  <
shift_expression  0.5
additive_expression  0.5
multiplicative_expression  0.5
cast_expression  0.5
repeat_0_cast_operator  
empty  
empty  
unary_expression  0.5
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0.5
postfix_expression  0.5
primary  0.5
constant  0.5
float  0.5
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
compound_statement  {/* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST; /* COMPOUND: 4 */}
*literal  {
IN  
NL  
compound_statement_body  /* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST;
repeat_0_declaration_or_statement  /* STM: 16 */ free ($_transmit_packet_data1); goto LABEL_ABST;
declaration_or_statement  /* STM: 16 */ free ($_transmit_packet_data1);
declaration  /* STM: 16 */ free ($_transmit_packet_data1);
__declaration_4__  /* STM: 16 */ free ($_transmit_packet_data1);
opt__inLineComment  /* STM: 16 */
inLineComment  /* STM: 16 */
decl_specifiers  free ($_transmit_packet_data1)
repeat_0_decl_qualifier_or_type_specifier  free ($_transmit_packet_data1)
decl_qualifier_or_type_specifier  free ($_transmit_packet_data1)
__decl_qualifier_or_type_specifier_1__  free ($_transmit_packet_data1)
not__asm_spec  
TXL_NOT_  
macro_specifier  free ($_transmit_packet_data1)
macro_call  free ($_transmit_packet_data1)
macro_name  free
id  free
*literal  (
macro_arguments  $_transmit_packet_data1
repeat_0_macro_argument  $_transmit_packet_data1
macro_argument  $_transmit_packet_data1
__macro_argument_2__  $_transmit_packet_data1
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_transmit_packet_data1
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  goto LABEL_ABST;
declaration_or_statement  goto LABEL_ABST;
statement  goto LABEL_ABST;
__statement_2__  goto LABEL_ABST;
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  
empty  
repeat_0_label  
empty  
empty  
unlabeled_statement  goto LABEL_ABST;
c_unlabeled_statement  goto LABEL_ABST;
__c_unlabeled_statement_1__  goto LABEL_ABST;
simple_statement  goto LABEL_ABST
jump_statement  goto LABEL_ABST
__jump_statement_1__  goto LABEL_ABST
*literal  goto
label_id  LABEL_ABST
id  LABEL_ABST
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  /* COMPOUND: 4 */
inLineComment  /* COMPOUND: 4 */
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {} /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {}
commentLine  //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {}
commentToken  //COMPOUND END: if (($_transmit_packet_r % 1000000) / 1000000.0 < 0.5) {}
NL  
repeat_0_declaration_or_statement  /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno; /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno;
declaration  /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno;
__declaration_4__  /* DECL: 22 */ int $_recv_packet_seqno1 = $_transmit_packet_seqno;
opt__inLineComment  /* DECL: 22 */
inLineComment  /* DECL: 22 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_seqno1 = $_transmit_packet_seqno
init_declarator  $_recv_packet_seqno1 = $_transmit_packet_seqno
declarator  $_recv_packet_seqno1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_seqno1
reference_id  $_recv_packet_seqno1
id  $_recv_packet_seqno1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_transmit_packet_seqno
initialization  = $_transmit_packet_seqno
__initialization_1__  = $_transmit_packet_seqno
opt__initdata  
empty  
*literal  =
initializer  $_transmit_packet_seqno
__initializer_1__  $_transmit_packet_seqno
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_transmit_packet_seqno
initializer_unit  $_transmit_packet_seqno
assignment_expression  $_transmit_packet_seqno
conditional_expression  $_transmit_packet_seqno
logical_OR_expression  $_transmit_packet_seqno
logical_AND_expression  $_transmit_packet_seqno
inclusive_OR_expression  $_transmit_packet_seqno
exclusive_OR_expression  $_transmit_packet_seqno
AND_expression  $_transmit_packet_seqno
equality_expression  $_transmit_packet_seqno
relational_expression  $_transmit_packet_seqno
shift_expression  $_transmit_packet_seqno
additive_expression  $_transmit_packet_seqno
multiplicative_expression  $_transmit_packet_seqno
cast_expression  $_transmit_packet_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_transmit_packet_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_transmit_packet_seqno
postfix_expression  $_transmit_packet_seqno
primary  $_transmit_packet_seqno
reference_id  $_transmit_packet_seqno
id  $_transmit_packet_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len; /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len;
declaration  /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len;
__declaration_4__  /* DECL: 23 */ int $_recv_packet_len1 = $_transmit_packet_len;
opt__inLineComment  /* DECL: 23 */
inLineComment  /* DECL: 23 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_len1 = $_transmit_packet_len
init_declarator  $_recv_packet_len1 = $_transmit_packet_len
declarator  $_recv_packet_len1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_len1
reference_id  $_recv_packet_len1
id  $_recv_packet_len1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_transmit_packet_len
initialization  = $_transmit_packet_len
__initialization_1__  = $_transmit_packet_len
opt__initdata  
empty  
*literal  =
initializer  $_transmit_packet_len
__initializer_1__  $_transmit_packet_len
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_transmit_packet_len
initializer_unit  $_transmit_packet_len
assignment_expression  $_transmit_packet_len
conditional_expression  $_transmit_packet_len
logical_OR_expression  $_transmit_packet_len
logical_AND_expression  $_transmit_packet_len
inclusive_OR_expression  $_transmit_packet_len
exclusive_OR_expression  $_transmit_packet_len
AND_expression  $_transmit_packet_len
equality_expression  $_transmit_packet_len
relational_expression  $_transmit_packet_len
shift_expression  $_transmit_packet_len
additive_expression  $_transmit_packet_len
multiplicative_expression  $_transmit_packet_len
cast_expression  $_transmit_packet_len
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_transmit_packet_len
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_transmit_packet_len
postfix_expression  $_transmit_packet_len
primary  $_transmit_packet_len
reference_id  $_transmit_packet_len
id  $_transmit_packet_len
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data; /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data;
declaration  /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data;
__declaration_4__  /* DECL: 24 */ char *$_recv_packet_data1 = $_transmit_packet_data;
opt__inLineComment  /* DECL: 24 */
inLineComment  /* DECL: 24 */
decl_specifiers  char
repeat_0_decl_qualifier_or_type_specifier  char
decl_qualifier_or_type_specifier  char
type_specifier  char
simple_type_name  char
*literal  char
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_data1 = $_transmit_packet_data
init_declarator  *$_recv_packet_data1 = $_transmit_packet_data
declarator  *$_recv_packet_data1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_data1
reference_id  $_recv_packet_data1
id  $_recv_packet_data1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_transmit_packet_data
initialization  = $_transmit_packet_data
__initialization_1__  = $_transmit_packet_data
opt__initdata  
empty  
*literal  =
initializer  $_transmit_packet_data
__initializer_1__  $_transmit_packet_data
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_transmit_packet_data
initializer_unit  $_transmit_packet_data
assignment_expression  $_transmit_packet_data
conditional_expression  $_transmit_packet_data
logical_OR_expression  $_transmit_packet_data
logical_AND_expression  $_transmit_packet_data
inclusive_OR_expression  $_transmit_packet_data
exclusive_OR_expression  $_transmit_packet_data
AND_expression  $_transmit_packet_data
equality_expression  $_transmit_packet_data
relational_expression  $_transmit_packet_data
shift_expression  $_transmit_packet_data
additive_expression  $_transmit_packet_data
multiplicative_expression  $_transmit_packet_data
cast_expression  $_transmit_packet_data
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_transmit_packet_data
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_transmit_packet_data
postfix_expression  $_transmit_packet_data
primary  $_transmit_packet_data
reference_id  $_transmit_packet_data
id  $_transmit_packet_data
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile; /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile;
declaration  /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile;
__declaration_4__  /* DECL: 25 */ FILE *$_recv_packet_ofile1 = $_transmit_packet_ofile;
opt__inLineComment  /* DECL: 25 */
inLineComment  /* DECL: 25 */
decl_specifiers  FILE
repeat_0_decl_qualifier_or_type_specifier  FILE
decl_qualifier_or_type_specifier  FILE
type_specifier  FILE
simple_type_name  FILE
type_id  FILE
reference_id  FILE
id  FILE
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_ofile1 = $_transmit_packet_ofile
init_declarator  *$_recv_packet_ofile1 = $_transmit_packet_ofile
declarator  *$_recv_packet_ofile1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_ofile1
reference_id  $_recv_packet_ofile1
id  $_recv_packet_ofile1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_transmit_packet_ofile
initialization  = $_transmit_packet_ofile
__initialization_1__  = $_transmit_packet_ofile
opt__initdata  
empty  
*literal  =
initializer  $_transmit_packet_ofile
__initializer_1__  $_transmit_packet_ofile
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_transmit_packet_ofile
initializer_unit  $_transmit_packet_ofile
assignment_expression  $_transmit_packet_ofile
conditional_expression  $_transmit_packet_ofile
logical_OR_expression  $_transmit_packet_ofile
logical_AND_expression  $_transmit_packet_ofile
inclusive_OR_expression  $_transmit_packet_ofile
exclusive_OR_expression  $_transmit_packet_ofile
AND_expression  $_transmit_packet_ofile
equality_expression  $_transmit_packet_ofile
relational_expression  $_transmit_packet_ofile
shift_expression  $_transmit_packet_ofile
additive_expression  $_transmit_packet_ofile
multiplicative_expression  $_transmit_packet_ofile
cast_expression  $_transmit_packet_ofile
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_transmit_packet_ofile
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_transmit_packet_ofile
postfix_expression  $_transmit_packet_ofile
primary  $_transmit_packet_ofile
reference_id  $_transmit_packet_ofile
id  $_transmit_packet_ofile
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy; //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy;
declaration  /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy;
__declaration_4__  /* DECL: 26 */ int $_recv_packet_strategy1 = $_transmit_packet_repair_strategy;
opt__inLineComment  /* DECL: 26 */
inLineComment  /* DECL: 26 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_strategy1 = $_transmit_packet_repair_strategy
init_declarator  $_recv_packet_strategy1 = $_transmit_packet_repair_strategy
declarator  $_recv_packet_strategy1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_strategy1
reference_id  $_recv_packet_strategy1
id  $_recv_packet_strategy1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_transmit_packet_repair_strategy
initialization  = $_transmit_packet_repair_strategy
__initialization_1__  = $_transmit_packet_repair_strategy
opt__initdata  
empty  
*literal  =
initializer  $_transmit_packet_repair_strategy
__initializer_1__  $_transmit_packet_repair_strategy
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_transmit_packet_repair_strategy
initializer_unit  $_transmit_packet_repair_strategy
assignment_expression  $_transmit_packet_repair_strategy
conditional_expression  $_transmit_packet_repair_strategy
logical_OR_expression  $_transmit_packet_repair_strategy
logical_AND_expression  $_transmit_packet_repair_strategy
inclusive_OR_expression  $_transmit_packet_repair_strategy
exclusive_OR_expression  $_transmit_packet_repair_strategy
AND_expression  $_transmit_packet_repair_strategy
equality_expression  $_transmit_packet_repair_strategy
relational_expression  $_transmit_packet_repair_strategy
shift_expression  $_transmit_packet_repair_strategy
additive_expression  $_transmit_packet_repair_strategy
multiplicative_expression  $_transmit_packet_repair_strategy
cast_expression  $_transmit_packet_repair_strategy
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_transmit_packet_repair_strategy
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_transmit_packet_repair_strategy
postfix_expression  $_transmit_packet_repair_strategy
primary  $_transmit_packet_repair_strategy
reference_id  $_transmit_packet_repair_strategy
id  $_transmit_packet_repair_strategy
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy); /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy);
commentLine  //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy);
commentToken  //Mappings for function: recv_packet ($_transmit_packet_seqno, $_transmit_packet_len, $_transmit_packet_data, $_transmit_packet_ofile, $_transmit_packet_repair_strategy);
NL  
repeat_0_declaration_or_statement  /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1; /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1;
declaration  /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1;
__declaration_4__  /* DECL: 27 */ static int $_recv_packet_prev_seqno = -1;
opt__inLineComment  /* DECL: 27 */
inLineComment  /* DECL: 27 */
decl_specifiers  static int
repeat_0_decl_qualifier_or_type_specifier  static int
decl_qualifier_or_type_specifier  static
decl_qualifier  static
sc_specifier  static
*literal  static
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_prev_seqno = -1
init_declarator  $_recv_packet_prev_seqno = -1
declarator  $_recv_packet_prev_seqno
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_prev_seqno
reference_id  $_recv_packet_prev_seqno
id  $_recv_packet_prev_seqno
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = -1
initialization  = -1
__initialization_1__  = -1
opt__initdata  
empty  
*literal  =
initializer  -1
__initializer_1__  -1
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  -1
initializer_unit  -1
assignment_expression  -1
conditional_expression  -1
logical_OR_expression  -1
logical_AND_expression  -1
inclusive_OR_expression  -1
exclusive_OR_expression  -1
AND_expression  -1
equality_expression  -1
relational_expression  -1
shift_expression  -1
additive_expression  -1
multiplicative_expression  -1
cast_expression  -1
repeat_0_cast_operator  
empty  
empty  
unary_expression  -1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  -1
__sub_unary_expression_1__  -1
unary_operator  -
*literal  -
SPOFF  
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0; /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0;
declaration  /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0;
__declaration_4__  /* DECL: 28 */ static short *$_recv_packet_prev_samples = 0;
opt__inLineComment  /* DECL: 28 */
inLineComment  /* DECL: 28 */
decl_specifiers  static short
repeat_0_decl_qualifier_or_type_specifier  static short
decl_qualifier_or_type_specifier  static
decl_qualifier  static
sc_specifier  static
*literal  static
repeat_0_decl_qualifier_or_type_specifier  short
decl_qualifier_or_type_specifier  short
decl_qualifier  short
type_qualifier  short
bit_qualifier  short
*literal  short
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_prev_samples = 0
init_declarator  *$_recv_packet_prev_samples = 0
declarator  *$_recv_packet_prev_samples
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_prev_samples
reference_id  $_recv_packet_prev_samples
id  $_recv_packet_prev_samples
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = 0
initialization  = 0
__initialization_1__  = 0
opt__initdata  
empty  
*literal  =
initializer  0
__initializer_1__  0
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  0
initializer_unit  0
assignment_expression  0
conditional_expression  0
logical_OR_expression  0
logical_AND_expression  0
inclusive_OR_expression  0
exclusive_OR_expression  0
AND_expression  0
equality_expression  0
relational_expression  0
shift_expression  0
additive_expression  0
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 29 */ static long $_recv_packet_stream_position = 0; /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 29 */ static long $_recv_packet_stream_position = 0;
declaration  /* DECL: 29 */ static long $_recv_packet_stream_position = 0;
__declaration_4__  /* DECL: 29 */ static long $_recv_packet_stream_position = 0;
opt__inLineComment  /* DECL: 29 */
inLineComment  /* DECL: 29 */
decl_specifiers  static long
repeat_0_decl_qualifier_or_type_specifier  static long
decl_qualifier_or_type_specifier  static
decl_qualifier  static
sc_specifier  static
*literal  static
repeat_0_decl_qualifier_or_type_specifier  long
decl_qualifier_or_type_specifier  long
decl_qualifier  long
type_qualifier  long
bit_qualifier  long
*literal  long
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_stream_position = 0
init_declarator  $_recv_packet_stream_position = 0
declarator  $_recv_packet_stream_position
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_stream_position
reference_id  $_recv_packet_stream_position
id  $_recv_packet_stream_position
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = 0
initialization  = 0
__initialization_1__  = 0
opt__initdata  
empty  
*literal  =
initializer  0
__initializer_1__  0
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  0
initializer_unit  0
assignment_expression  0
conditional_expression  0
logical_OR_expression  0
logical_AND_expression  0
inclusive_OR_expression  0
exclusive_OR_expression  0
AND_expression  0
equality_expression  0
relational_expression  0
shift_expression  0
additive_expression  0
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1; /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1;
declaration  /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1;
__declaration_4__  /* DECL: 30 */ short *$_recv_packet_samples = (short *) $_recv_packet_data1;
opt__inLineComment  /* DECL: 30 */
inLineComment  /* DECL: 30 */
decl_specifiers  short
repeat_0_decl_qualifier_or_type_specifier  short
decl_qualifier_or_type_specifier  short
decl_qualifier  short
type_qualifier  short
bit_qualifier  short
*literal  short
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_samples = (short *) $_recv_packet_data1
init_declarator  *$_recv_packet_samples = (short *) $_recv_packet_data1
declarator  *$_recv_packet_samples
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_samples
reference_id  $_recv_packet_samples
id  $_recv_packet_samples
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = (short *) $_recv_packet_data1
initialization  = (short *) $_recv_packet_data1
__initialization_1__  = (short *) $_recv_packet_data1
opt__initdata  
empty  
*literal  =
initializer  (short *) $_recv_packet_data1
__initializer_1__  (short *) $_recv_packet_data1
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  (short *) $_recv_packet_data1
initializer_unit  (short *) $_recv_packet_data1
assignment_expression  (short *) $_recv_packet_data1
conditional_expression  (short *) $_recv_packet_data1
logical_OR_expression  (short *) $_recv_packet_data1
logical_AND_expression  (short *) $_recv_packet_data1
inclusive_OR_expression  (short *) $_recv_packet_data1
exclusive_OR_expression  (short *) $_recv_packet_data1
AND_expression  (short *) $_recv_packet_data1
equality_expression  (short *) $_recv_packet_data1
relational_expression  (short *) $_recv_packet_data1
shift_expression  (short *) $_recv_packet_data1
additive_expression  (short *) $_recv_packet_data1
multiplicative_expression  (short *) $_recv_packet_data1
cast_expression  (short *) $_recv_packet_data1
repeat_0_cast_operator  (short *)
cast_operator  (short *)
*literal  (
type_name  short *
type_specifiers  short
repeat_0_type_qualifier  short
type_qualifier  short
bit_qualifier  short
*literal  short
repeat_0_type_qualifier  
empty  
empty  
repeat_0_abstract_declarator  *
abstract_declarator  *
__abstract_declarator_1__  *
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
repeat_0_declarator_extension  
empty  
empty  
SPON  
repeat_0_abstract_declarator  
empty  
empty  
*literal  )
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_data1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_data1
postfix_expression  $_recv_packet_data1
primary  $_recv_packet_data1
reference_id  $_recv_packet_data1
id  $_recv_packet_data1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2; /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2;
declaration  /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2;
__declaration_4__  /* DECL: 31 */ int $_recv_packet_num_samples = $_recv_packet_len1 / 2;
opt__inLineComment  /* DECL: 31 */
inLineComment  /* DECL: 31 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_num_samples = $_recv_packet_len1 / 2
init_declarator  $_recv_packet_num_samples = $_recv_packet_len1 / 2
declarator  $_recv_packet_num_samples
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_num_samples
reference_id  $_recv_packet_num_samples
id  $_recv_packet_num_samples
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_recv_packet_len1 / 2
initialization  = $_recv_packet_len1 / 2
__initialization_1__  = $_recv_packet_len1 / 2
opt__initdata  
empty  
*literal  =
initializer  $_recv_packet_len1 / 2
__initializer_1__  $_recv_packet_len1 / 2
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_recv_packet_len1 / 2
initializer_unit  $_recv_packet_len1 / 2
assignment_expression  $_recv_packet_len1 / 2
conditional_expression  $_recv_packet_len1 / 2
logical_OR_expression  $_recv_packet_len1 / 2
logical_AND_expression  $_recv_packet_len1 / 2
inclusive_OR_expression  $_recv_packet_len1 / 2
exclusive_OR_expression  $_recv_packet_len1 / 2
AND_expression  $_recv_packet_len1 / 2
equality_expression  $_recv_packet_len1 / 2
relational_expression  $_recv_packet_len1 / 2
shift_expression  $_recv_packet_len1 / 2
additive_expression  $_recv_packet_len1 / 2
multiplicative_expression  $_recv_packet_len1 / 2
cast_expression  $_recv_packet_len1
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_len1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_len1
postfix_expression  $_recv_packet_len1
primary  $_recv_packet_len1
reference_id  $_recv_packet_len1
id  $_recv_packet_len1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  / 2
multipy_divide_cast_expression  / 2
multiplicative_operator  /
*literal  /
cast_expression  2
repeat_0_cast_operator  
empty  
empty  
unary_expression  2
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  2
postfix_expression  2
primary  2
constant  2
number  2
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1); //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1);
declaration  /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1);
__declaration_4__  /* STM: 17 */ printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1);
opt__inLineComment  /* STM: 17 */
inLineComment  /* STM: 17 */
decl_specifiers  printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1)
repeat_0_decl_qualifier_or_type_specifier  printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1)
decl_qualifier_or_type_specifier  printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1)
__decl_qualifier_or_type_specifier_1__  printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1)
not__asm_spec  
TXL_NOT_  
macro_specifier  printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1)
macro_call  printf ("recv_packet: seqno=%d\n", $_recv_packet_seqno1)
macro_name  printf
id  printf
*literal  (
macro_arguments  "recv_packet: seqno=%d\n", $_recv_packet_seqno1
repeat_0_macro_argument  "recv_packet: seqno=%d\n", $_recv_packet_seqno1
macro_argument  "recv_packet: seqno=%d\n"
__macro_argument_2__  "recv_packet: seqno=%d\n"
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
stringlit  "recv_packet: seqno=%d\n"
repeat_0_macro_argument  , $_recv_packet_seqno1
macro_argument  ,
__macro_argument_2__  ,
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
*literal  ,
repeat_0_macro_argument  $_recv_packet_seqno1
macro_argument  $_recv_packet_seqno1
__macro_argument_2__  $_recv_packet_seqno1
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_recv_packet_seqno1
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {} /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {}
commentLine  //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {}
commentToken  //COMPOUND START: if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno)) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
declaration_or_statement  /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
statement  /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
__statement_2__  /* COMPOUND: 5 */ if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 5 */
inLineComment  /* COMPOUND: 5 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
c_unlabeled_statement  if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
structured_statement  if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
if_statement  if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
__if_statement_1__  if ($_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)) {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
*literal  if
*literal  (
expression_list  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
list_0_expression  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
expression  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
assignment_expression  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
conditional_expression  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
logical_OR_expression  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
logical_AND_expression  $_recv_packet_prev_seqno != -1 && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
inclusive_OR_expression  $_recv_packet_prev_seqno != -1
exclusive_OR_expression  $_recv_packet_prev_seqno != -1
AND_expression  $_recv_packet_prev_seqno != -1
equality_expression  $_recv_packet_prev_seqno != -1
relational_expression  $_recv_packet_prev_seqno
shift_expression  $_recv_packet_prev_seqno
additive_expression  $_recv_packet_prev_seqno
multiplicative_expression  $_recv_packet_prev_seqno
cast_expression  $_recv_packet_prev_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_prev_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_prev_seqno
postfix_expression  $_recv_packet_prev_seqno
primary  $_recv_packet_prev_seqno
reference_id  $_recv_packet_prev_seqno
id  $_recv_packet_prev_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  != -1
equality_relational_expression  != -1
equality_operator  !=
*literal  !=
relational_expression  -1
shift_expression  -1
additive_expression  -1
multiplicative_expression  -1
cast_expression  -1
repeat_0_cast_operator  
empty  
empty  
unary_expression  -1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  -1
__sub_unary_expression_1__  -1
unary_operator  -
*literal  -
SPOFF  
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
AND_inclusive_OR_expression  && ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
repeat_0_preprocessor  
empty  
empty  
logical_AND_operator  &&
*literal  &&
inclusive_OR_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
exclusive_OR_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
AND_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
equality_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
relational_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
shift_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
additive_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
multiplicative_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
cast_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
repeat_0_cast_operator  
empty  
empty  
unary_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
postfix_expression  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
primary  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
__primary_1__  ($_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1)
*literal  (
SPON  
expression_list  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
list_0_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
assignment_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
conditional_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
logical_OR_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
logical_AND_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
inclusive_OR_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
exclusive_OR_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
AND_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
equality_expression  $_recv_packet_prev_seqno + 1 != $_recv_packet_seqno1
relational_expression  $_recv_packet_prev_seqno + 1
shift_expression  $_recv_packet_prev_seqno + 1
additive_expression  $_recv_packet_prev_seqno + 1
multiplicative_expression  $_recv_packet_prev_seqno
cast_expression  $_recv_packet_prev_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_prev_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_prev_seqno
postfix_expression  $_recv_packet_prev_seqno
primary  $_recv_packet_prev_seqno
reference_id  $_recv_packet_prev_seqno
id  $_recv_packet_prev_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  + 1
add_subtract_multiplicative_expression  + 1
additive_operator  +
*literal  +
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  != $_recv_packet_seqno1
equality_relational_expression  != $_recv_packet_seqno1
equality_operator  !=
*literal  !=
relational_expression  $_recv_packet_seqno1
shift_expression  $_recv_packet_seqno1
additive_expression  $_recv_packet_seqno1
multiplicative_expression  $_recv_packet_seqno1
cast_expression  $_recv_packet_seqno1
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_seqno1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_seqno1
postfix_expression  $_recv_packet_seqno1
primary  $_recv_packet_seqno1
reference_id  $_recv_packet_seqno1
id  $_recv_packet_seqno1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
opt__lit__,  
empty  
*literal  )
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
compound_statement  {/* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}}
*literal  {
IN  
NL  
compound_statement_body  /* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
repeat_0_declaration_or_statement  /* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno; /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno;
declaration  /* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno;
__declaration_4__  /* DECL: 32 */ int $_recv_packet_i, $_recv_packet_missing_seqno;
opt__inLineComment  /* DECL: 32 */
inLineComment  /* DECL: 32 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_i, $_recv_packet_missing_seqno
init_declarator  $_recv_packet_i
declarator  $_recv_packet_i
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_i
reference_id  $_recv_packet_i
id  $_recv_packet_i
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  $_recv_packet_missing_seqno
init_declarator  $_recv_packet_missing_seqno
declarator  $_recv_packet_missing_seqno
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_missing_seqno
reference_id  $_recv_packet_missing_seqno
id  $_recv_packet_missing_seqno
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1); /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1);
declaration  /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1);
__declaration_4__  /* STM: 18 */ printf ("s=%d\n", $_recv_packet_strategy1);
opt__inLineComment  /* STM: 18 */
inLineComment  /* STM: 18 */
decl_specifiers  printf ("s=%d\n", $_recv_packet_strategy1)
repeat_0_decl_qualifier_or_type_specifier  printf ("s=%d\n", $_recv_packet_strategy1)
decl_qualifier_or_type_specifier  printf ("s=%d\n", $_recv_packet_strategy1)
__decl_qualifier_or_type_specifier_1__  printf ("s=%d\n", $_recv_packet_strategy1)
not__asm_spec  
TXL_NOT_  
macro_specifier  printf ("s=%d\n", $_recv_packet_strategy1)
macro_call  printf ("s=%d\n", $_recv_packet_strategy1)
macro_name  printf
id  printf
*literal  (
macro_arguments  "s=%d\n", $_recv_packet_strategy1
repeat_0_macro_argument  "s=%d\n", $_recv_packet_strategy1
macro_argument  "s=%d\n"
__macro_argument_2__  "s=%d\n"
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
stringlit  "s=%d\n"
repeat_0_macro_argument  , $_recv_packet_strategy1
macro_argument  ,
__macro_argument_2__  ,
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
*literal  ,
repeat_0_macro_argument  $_recv_packet_strategy1
macro_argument  $_recv_packet_strategy1
__macro_argument_2__  $_recv_packet_strategy1
not__lit__(  
TXL_NOT_  
not__lit__)  
TXL_NOT_  
id  $_recv_packet_strategy1
repeat_0_macro_argument  
empty  
empty  
*literal  )
opt__nosemiNL  
empty  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples); /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples);
declaration  /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples);
__declaration_4__  /* DECL: 33 */ int *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples);
opt__inLineComment  /* DECL: 33 */
inLineComment  /* DECL: 33 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples)
init_declarator  *$_recv_packet_dctPrev = dct ($_recv_packet_prev_samples)
declarator  *$_recv_packet_dctPrev
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_dctPrev
reference_id  $_recv_packet_dctPrev
id  $_recv_packet_dctPrev
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = dct ($_recv_packet_prev_samples)
initialization  = dct ($_recv_packet_prev_samples)
__initialization_1__  = dct ($_recv_packet_prev_samples)
opt__initdata  
empty  
*literal  =
initializer  dct ($_recv_packet_prev_samples)
__initializer_1__  dct ($_recv_packet_prev_samples)
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  dct ($_recv_packet_prev_samples)
initializer_unit  dct ($_recv_packet_prev_samples)
assignment_expression  dct ($_recv_packet_prev_samples)
conditional_expression  dct ($_recv_packet_prev_samples)
logical_OR_expression  dct ($_recv_packet_prev_samples)
logical_AND_expression  dct ($_recv_packet_prev_samples)
inclusive_OR_expression  dct ($_recv_packet_prev_samples)
exclusive_OR_expression  dct ($_recv_packet_prev_samples)
AND_expression  dct ($_recv_packet_prev_samples)
equality_expression  dct ($_recv_packet_prev_samples)
relational_expression  dct ($_recv_packet_prev_samples)
shift_expression  dct ($_recv_packet_prev_samples)
additive_expression  dct ($_recv_packet_prev_samples)
multiplicative_expression  dct ($_recv_packet_prev_samples)
cast_expression  dct ($_recv_packet_prev_samples)
repeat_0_cast_operator  
empty  
empty  
unary_expression  dct ($_recv_packet_prev_samples)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  dct ($_recv_packet_prev_samples)
postfix_expression  dct ($_recv_packet_prev_samples)
primary  dct
reference_id  dct
id  dct
SPOFF  
repeat_0_postfix_extension   ($_recv_packet_prev_samples)
postfix_extension   ($_recv_packet_prev_samples)
__postfix_extension_2__   ($_recv_packet_prev_samples)
SP   
*literal  (
SPON  
list_0_argument_expression  $_recv_packet_prev_samples
argument_expression  $_recv_packet_prev_samples
__argument_expression_1__  $_recv_packet_prev_samples
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_recv_packet_prev_samples
conditional_expression  $_recv_packet_prev_samples
logical_OR_expression  $_recv_packet_prev_samples
logical_AND_expression  $_recv_packet_prev_samples
inclusive_OR_expression  $_recv_packet_prev_samples
exclusive_OR_expression  $_recv_packet_prev_samples
AND_expression  $_recv_packet_prev_samples
equality_expression  $_recv_packet_prev_samples
relational_expression  $_recv_packet_prev_samples
shift_expression  $_recv_packet_prev_samples
additive_expression  $_recv_packet_prev_samples
multiplicative_expression  $_recv_packet_prev_samples
cast_expression  $_recv_packet_prev_samples
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_prev_samples
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_prev_samples
postfix_expression  $_recv_packet_prev_samples
primary  $_recv_packet_prev_samples
reference_id  $_recv_packet_prev_samples
id  $_recv_packet_prev_samples
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples); /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples);
declaration  /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples);
__declaration_4__  /* DECL: 34 */ int *$_recv_packet_dctCurr = dct ($_recv_packet_samples);
opt__inLineComment  /* DECL: 34 */
inLineComment  /* DECL: 34 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_dctCurr = dct ($_recv_packet_samples)
init_declarator  *$_recv_packet_dctCurr = dct ($_recv_packet_samples)
declarator  *$_recv_packet_dctCurr
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_dctCurr
reference_id  $_recv_packet_dctCurr
id  $_recv_packet_dctCurr
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = dct ($_recv_packet_samples)
initialization  = dct ($_recv_packet_samples)
__initialization_1__  = dct ($_recv_packet_samples)
opt__initdata  
empty  
*literal  =
initializer  dct ($_recv_packet_samples)
__initializer_1__  dct ($_recv_packet_samples)
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  dct ($_recv_packet_samples)
initializer_unit  dct ($_recv_packet_samples)
assignment_expression  dct ($_recv_packet_samples)
conditional_expression  dct ($_recv_packet_samples)
logical_OR_expression  dct ($_recv_packet_samples)
logical_AND_expression  dct ($_recv_packet_samples)
inclusive_OR_expression  dct ($_recv_packet_samples)
exclusive_OR_expression  dct ($_recv_packet_samples)
AND_expression  dct ($_recv_packet_samples)
equality_expression  dct ($_recv_packet_samples)
relational_expression  dct ($_recv_packet_samples)
shift_expression  dct ($_recv_packet_samples)
additive_expression  dct ($_recv_packet_samples)
multiplicative_expression  dct ($_recv_packet_samples)
cast_expression  dct ($_recv_packet_samples)
repeat_0_cast_operator  
empty  
empty  
unary_expression  dct ($_recv_packet_samples)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  dct ($_recv_packet_samples)
postfix_expression  dct ($_recv_packet_samples)
primary  dct
reference_id  dct
id  dct
SPOFF  
repeat_0_postfix_extension   ($_recv_packet_samples)
postfix_extension   ($_recv_packet_samples)
__postfix_extension_2__   ($_recv_packet_samples)
SP   
*literal  (
SPON  
list_0_argument_expression  $_recv_packet_samples
argument_expression  $_recv_packet_samples
__argument_expression_1__  $_recv_packet_samples
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_recv_packet_samples
conditional_expression  $_recv_packet_samples
logical_OR_expression  $_recv_packet_samples
logical_AND_expression  $_recv_packet_samples
inclusive_OR_expression  $_recv_packet_samples
exclusive_OR_expression  $_recv_packet_samples
AND_expression  $_recv_packet_samples
equality_expression  $_recv_packet_samples
relational_expression  $_recv_packet_samples
shift_expression  $_recv_packet_samples
additive_expression  $_recv_packet_samples
multiplicative_expression  $_recv_packet_samples
cast_expression  $_recv_packet_samples
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_samples
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_samples
postfix_expression  $_recv_packet_samples
primary  $_recv_packet_samples
reference_id  $_recv_packet_samples
id  $_recv_packet_samples
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1; /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1;
declaration  /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1;
__declaration_4__  /* DECL: 35 */ int $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1;
opt__inLineComment  /* DECL: 35 */
inLineComment  /* DECL: 35 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
init_declarator  $_recv_packet_nrOfLostPackets = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
declarator  $_recv_packet_nrOfLostPackets
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_nrOfLostPackets
reference_id  $_recv_packet_nrOfLostPackets
id  $_recv_packet_nrOfLostPackets
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
initialization  = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
__initialization_1__  = $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
opt__initdata  
empty  
*literal  =
initializer  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
__initializer_1__  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
initializer_unit  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
assignment_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
conditional_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
logical_OR_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
logical_AND_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
inclusive_OR_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
exclusive_OR_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
AND_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
equality_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
relational_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
shift_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
additive_expression  $_recv_packet_seqno1 - $_recv_packet_prev_seqno - 1
multiplicative_expression  $_recv_packet_seqno1
cast_expression  $_recv_packet_seqno1
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_seqno1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_seqno1
postfix_expression  $_recv_packet_seqno1
primary  $_recv_packet_seqno1
reference_id  $_recv_packet_seqno1
id  $_recv_packet_seqno1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  - $_recv_packet_prev_seqno - 1
add_subtract_multiplicative_expression  - $_recv_packet_prev_seqno
additive_operator  -
*literal  -
multiplicative_expression  $_recv_packet_prev_seqno
cast_expression  $_recv_packet_prev_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_prev_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_prev_seqno
postfix_expression  $_recv_packet_prev_seqno
primary  $_recv_packet_prev_seqno
reference_id  $_recv_packet_prev_seqno
id  $_recv_packet_prev_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  - 1
add_subtract_multiplicative_expression  - 1
additive_operator  -
*literal  -
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 36 */ int $_recv_packet_kk; //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* DECL: 36 */ int $_recv_packet_kk;
declaration  /* DECL: 36 */ int $_recv_packet_kk;
__declaration_4__  /* DECL: 36 */ int $_recv_packet_kk;
opt__inLineComment  /* DECL: 36 */
inLineComment  /* DECL: 36 */
decl_specifiers  int $_recv_packet_kk
repeat_0_decl_qualifier_or_type_specifier  int $_recv_packet_kk
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  $_recv_packet_kk
decl_qualifier_or_type_specifier  $_recv_packet_kk
type_specifier  $_recv_packet_kk
simple_type_name  $_recv_packet_kk
type_id  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
not__declarator_extension  
TXL_NOT_  
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {} /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {}
commentLine  //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {}
commentToken  //COMPOUND START: if ($_recv_packet_nrOfLostPackets == 1) {} else if ($_recv_packet_nrOfLostPackets == 2) {} else if ($_recv_packet_nrOfLostPackets >= 3) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
declaration_or_statement  /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
statement  /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
__statement_2__  /* COMPOUND: 6 */ if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 6 */
inLineComment  /* COMPOUND: 6 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
c_unlabeled_statement  if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
structured_statement  if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
if_statement  if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
__if_statement_1__  if ($_recv_packet_nrOfLostPackets == 1) {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
*literal  if
*literal  (
expression_list  $_recv_packet_nrOfLostPackets == 1
list_0_expression  $_recv_packet_nrOfLostPackets == 1
expression  $_recv_packet_nrOfLostPackets == 1
assignment_expression  $_recv_packet_nrOfLostPackets == 1
conditional_expression  $_recv_packet_nrOfLostPackets == 1
logical_OR_expression  $_recv_packet_nrOfLostPackets == 1
logical_AND_expression  $_recv_packet_nrOfLostPackets == 1
inclusive_OR_expression  $_recv_packet_nrOfLostPackets == 1
exclusive_OR_expression  $_recv_packet_nrOfLostPackets == 1
AND_expression  $_recv_packet_nrOfLostPackets == 1
equality_expression  $_recv_packet_nrOfLostPackets == 1
relational_expression  $_recv_packet_nrOfLostPackets
shift_expression  $_recv_packet_nrOfLostPackets
additive_expression  $_recv_packet_nrOfLostPackets
multiplicative_expression  $_recv_packet_nrOfLostPackets
cast_expression  $_recv_packet_nrOfLostPackets
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_nrOfLostPackets
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_nrOfLostPackets
postfix_expression  $_recv_packet_nrOfLostPackets
primary  $_recv_packet_nrOfLostPackets
reference_id  $_recv_packet_nrOfLostPackets
id  $_recv_packet_nrOfLostPackets
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  == 1
equality_relational_expression  == 1
equality_operator  ==
*literal  ==
relational_expression  1
shift_expression  1
additive_expression  1
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
compound_statement  {/* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1}
*literal  {
IN  
NL  
compound_statement_body  /* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
repeat_0_declaration_or_statement  /* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int)); //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  /* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int));
declaration  /* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int));
__declaration_4__  /* DECL: 37 */ int *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int));
opt__inLineComment  /* DECL: 37 */
inLineComment  /* DECL: 37 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int))
init_declarator  *$_recv_packet_odata = malloc ($_recv_packet_num_samples * sizeof (int))
declarator  *$_recv_packet_odata
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  *
ptr_operator  *
__ptr_operator_1__  *
opt__nf_qualifier  
empty  
*literal  *
SPOFF  
repeat_0_ptr_qualifier  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_odata
reference_id  $_recv_packet_odata
id  $_recv_packet_odata
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = malloc ($_recv_packet_num_samples * sizeof (int))
initialization  = malloc ($_recv_packet_num_samples * sizeof (int))
__initialization_1__  = malloc ($_recv_packet_num_samples * sizeof (int))
opt__initdata  
empty  
*literal  =
initializer  malloc ($_recv_packet_num_samples * sizeof (int))
__initializer_1__  malloc ($_recv_packet_num_samples * sizeof (int))
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  malloc ($_recv_packet_num_samples * sizeof (int))
initializer_unit  malloc ($_recv_packet_num_samples * sizeof (int))
assignment_expression  malloc ($_recv_packet_num_samples * sizeof (int))
conditional_expression  malloc ($_recv_packet_num_samples * sizeof (int))
logical_OR_expression  malloc ($_recv_packet_num_samples * sizeof (int))
logical_AND_expression  malloc ($_recv_packet_num_samples * sizeof (int))
inclusive_OR_expression  malloc ($_recv_packet_num_samples * sizeof (int))
exclusive_OR_expression  malloc ($_recv_packet_num_samples * sizeof (int))
AND_expression  malloc ($_recv_packet_num_samples * sizeof (int))
equality_expression  malloc ($_recv_packet_num_samples * sizeof (int))
relational_expression  malloc ($_recv_packet_num_samples * sizeof (int))
shift_expression  malloc ($_recv_packet_num_samples * sizeof (int))
additive_expression  malloc ($_recv_packet_num_samples * sizeof (int))
multiplicative_expression  malloc ($_recv_packet_num_samples * sizeof (int))
cast_expression  malloc ($_recv_packet_num_samples * sizeof (int))
repeat_0_cast_operator  
empty  
empty  
unary_expression  malloc ($_recv_packet_num_samples * sizeof (int))
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  malloc ($_recv_packet_num_samples * sizeof (int))
postfix_expression  malloc ($_recv_packet_num_samples * sizeof (int))
primary  malloc
reference_id  malloc
id  malloc
SPOFF  
repeat_0_postfix_extension   ($_recv_packet_num_samples * sizeof (int))
postfix_extension   ($_recv_packet_num_samples * sizeof (int))
__postfix_extension_2__   ($_recv_packet_num_samples * sizeof (int))
SP   
*literal  (
SPON  
list_0_argument_expression  $_recv_packet_num_samples * sizeof (int)
argument_expression  $_recv_packet_num_samples * sizeof (int)
__argument_expression_1__  $_recv_packet_num_samples * sizeof (int)
repeat_0_preprocessor  
empty  
empty  
opt__id  $_recv_packet_num_samples
id  $_recv_packet_num_samples
assignment_expression  * sizeof (int)
conditional_expression  * sizeof (int)
logical_OR_expression  * sizeof (int)
logical_AND_expression  * sizeof (int)
inclusive_OR_expression  * sizeof (int)
exclusive_OR_expression  * sizeof (int)
AND_expression  * sizeof (int)
equality_expression  * sizeof (int)
relational_expression  * sizeof (int)
shift_expression  * sizeof (int)
additive_expression  * sizeof (int)
multiplicative_expression  * sizeof (int)
cast_expression  * sizeof (int)
repeat_0_cast_operator  
empty  
empty  
unary_expression  * sizeof (int)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  * sizeof (int)
__sub_unary_expression_1__  * sizeof (int)
unary_operator  *
*literal  *
SPOFF  
cast_expression  sizeof (int)
repeat_0_cast_operator  
empty  
empty  
unary_expression  sizeof (int)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  sizeof (int)
__sub_unary_expression_2__  sizeof (int)
SPON  
sizeof_expression  sizeof (int)
__sizeof_expression_1__  sizeof (int)
*literal  sizeof
*literal  (
type_name  int
type_specifiers  int
__type_specifiers_1__  int
repeat_0_type_qualifier  
empty  
empty  
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_type_qualifier  
empty  
empty  
repeat_0_abstract_declarator  
empty  
empty  
*literal  )
SPON  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {}
commentLine  //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {}
commentToken  //COMPOUND START: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */} //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
statement  /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
__statement_2__  /* COMPOUND: 7 */ for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 7 */
inLineComment  /* COMPOUND: 7 */
repeat_0_label  
empty  
empty  
unlabeled_statement  for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
c_unlabeled_statement  for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
structured_statement  for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
for_statement  for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
__for_statement_1__  for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
*literal  for
*literal  (
opt__expression_list  $_recv_packet_kk = 0
expression_list  $_recv_packet_kk = 0
list_0_expression  $_recv_packet_kk = 0
expression  $_recv_packet_kk = 0
assignment_expression  $_recv_packet_kk = 0
__assignment_expression_1__  $_recv_packet_kk = 0
unary_expression_assign  $_recv_packet_kk =
unary_expression  $_recv_packet_kk
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_kk
postfix_expression  $_recv_packet_kk
primary  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
assignment_operator  =
*literal  =
assignment_expression  0
conditional_expression  0
logical_OR_expression  0
logical_AND_expression  0
inclusive_OR_expression  0
exclusive_OR_expression  0
AND_expression  0
equality_expression  0
relational_expression  0
shift_expression  0
additive_expression  0
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
*literal  ;
opt__expression_list  $_recv_packet_kk < $_recv_packet_num_samples
expression_list  $_recv_packet_kk < $_recv_packet_num_samples
list_0_expression  $_recv_packet_kk < $_recv_packet_num_samples
expression  $_recv_packet_kk < $_recv_packet_num_samples
assignment_expression  $_recv_packet_kk < $_recv_packet_num_samples
conditional_expression  $_recv_packet_kk < $_recv_packet_num_samples
logical_OR_expression  $_recv_packet_kk < $_recv_packet_num_samples
logical_AND_expression  $_recv_packet_kk < $_recv_packet_num_samples
inclusive_OR_expression  $_recv_packet_kk < $_recv_packet_num_samples
exclusive_OR_expression  $_recv_packet_kk < $_recv_packet_num_samples
AND_expression  $_recv_packet_kk < $_recv_packet_num_samples
equality_expression  $_recv_packet_kk < $_recv_packet_num_samples
relational_expression  $_recv_packet_kk < $_recv_packet_num_samples
shift_expression  $_recv_packet_kk
additive_expression  $_recv_packet_kk
multiplicative_expression  $_recv_packet_kk
cast_expression  $_recv_packet_kk
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_kk
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_kk
postfix_expression  $_recv_packet_kk
primary  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  < $_recv_packet_num_samples
relational_shift_expression  < $_recv_packet_num_samples
relational_operator  <
*literal  <
shift_expression  $_recv_packet_num_samples
additive_expression  $_recv_packet_num_samples
multiplicative_expression  $_recv_packet_num_samples
cast_expression  $_recv_packet_num_samples
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_num_samples
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_num_samples
postfix_expression  $_recv_packet_num_samples
primary  $_recv_packet_num_samples
reference_id  $_recv_packet_num_samples
id  $_recv_packet_num_samples
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
*literal  ;
opt__expression_list  $_recv_packet_kk++
expression_list  $_recv_packet_kk++
list_0_expression  $_recv_packet_kk++
expression  $_recv_packet_kk++
assignment_expression  $_recv_packet_kk++
conditional_expression  $_recv_packet_kk++
logical_OR_expression  $_recv_packet_kk++
logical_AND_expression  $_recv_packet_kk++
inclusive_OR_expression  $_recv_packet_kk++
exclusive_OR_expression  $_recv_packet_kk++
AND_expression  $_recv_packet_kk++
equality_expression  $_recv_packet_kk++
relational_expression  $_recv_packet_kk++
shift_expression  $_recv_packet_kk++
additive_expression  $_recv_packet_kk++
multiplicative_expression  $_recv_packet_kk++
cast_expression  $_recv_packet_kk++
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_kk++
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_kk++
postfix_expression  $_recv_packet_kk++
primary  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
SPOFF  
repeat_0_postfix_extension  ++
postfix_extension  ++
*literal  ++
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
*literal  )
sub_statement  {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
compound_statement  {/* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate; /* COMPOUND: 7 */}
*literal  {
IN  
NL  
compound_statement_body  /* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
repeat_0_declaration_or_statement  /* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]); /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
declaration_or_statement  /* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]);
declaration  /* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]);
__declaration_4__  /* DECL: 38 */ double $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]);
opt__inLineComment  /* DECL: 38 */
inLineComment  /* DECL: 38 */
decl_specifiers  double
repeat_0_decl_qualifier_or_type_specifier  double
decl_qualifier_or_type_specifier  double
type_specifier  double
simple_type_name  double
*literal  double
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
init_declarator  $_recv_packet_intermediate = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
declarator  $_recv_packet_intermediate
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_intermediate
reference_id  $_recv_packet_intermediate
id  $_recv_packet_intermediate
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
initialization  = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
__initialization_1__  = abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
opt__initdata  
empty  
*literal  =
initializer  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
__initializer_1__  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
initializer_unit  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
assignment_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
conditional_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
logical_OR_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
logical_AND_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
inclusive_OR_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
exclusive_OR_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
AND_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
equality_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
relational_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
shift_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
additive_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
multiplicative_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
cast_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
repeat_0_cast_operator  
empty  
empty  
unary_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
postfix_expression  abs (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
primary  abs
reference_id  abs
id  abs
SPOFF  
repeat_0_postfix_extension   (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
postfix_extension   (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
__postfix_extension_2__   (0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk])
SP   
*literal  (
SPON  
list_0_argument_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
argument_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
__argument_expression_1__  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
conditional_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
logical_OR_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
logical_AND_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
inclusive_OR_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
exclusive_OR_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
AND_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
equality_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
relational_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
shift_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
additive_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk] + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
multiplicative_expression  0.5 * $_recv_packet_dctPrev[$_recv_packet_kk]
cast_expression  0.5
repeat_0_cast_operator  
empty  
empty  
unary_expression  0.5
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0.5
postfix_expression  0.5
primary  0.5
constant  0.5
float  0.5
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  * $_recv_packet_dctPrev[$_recv_packet_kk]
multipy_divide_cast_expression  * $_recv_packet_dctPrev[$_recv_packet_kk]
multiplicative_operator  *
*literal  *
cast_expression  $_recv_packet_dctPrev[$_recv_packet_kk]
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_dctPrev[$_recv_packet_kk]
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_dctPrev[$_recv_packet_kk]
postfix_expression  $_recv_packet_dctPrev[$_recv_packet_kk]
primary  $_recv_packet_dctPrev
reference_id  $_recv_packet_dctPrev
id  $_recv_packet_dctPrev
SPOFF  
repeat_0_postfix_extension  [$_recv_packet_kk]
postfix_extension  [$_recv_packet_kk]
__postfix_extension_1__  [$_recv_packet_kk]
*literal  [
SPON  
assignment_expression  $_recv_packet_kk
conditional_expression  $_recv_packet_kk
logical_OR_expression  $_recv_packet_kk
logical_AND_expression  $_recv_packet_kk
inclusive_OR_expression  $_recv_packet_kk
exclusive_OR_expression  $_recv_packet_kk
AND_expression  $_recv_packet_kk
equality_expression  $_recv_packet_kk
relational_expression  $_recv_packet_kk
shift_expression  $_recv_packet_kk
additive_expression  $_recv_packet_kk
multiplicative_expression  $_recv_packet_kk
cast_expression  $_recv_packet_kk
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_kk
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_kk
postfix_expression  $_recv_packet_kk
primary  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
SPOFF  
*literal  ]
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
add_subtract_multiplicative_expression  + 0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
additive_operator  +
*literal  +
multiplicative_expression  0.5 * $_recv_packet_dctCurr[$_recv_packet_kk]
cast_expression  0.5
repeat_0_cast_operator  
empty  
empty  
unary_expression  0.5
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0.5
postfix_expression  0.5
primary  0.5
constant  0.5
float  0.5
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  * $_recv_packet_dctCurr[$_recv_packet_kk]
multipy_divide_cast_expression  * $_recv_packet_dctCurr[$_recv_packet_kk]
multiplicative_operator  *
*literal  *
cast_expression  $_recv_packet_dctCurr[$_recv_packet_kk]
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_dctCurr[$_recv_packet_kk]
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_dctCurr[$_recv_packet_kk]
postfix_expression  $_recv_packet_dctCurr[$_recv_packet_kk]
primary  $_recv_packet_dctCurr
reference_id  $_recv_packet_dctCurr
id  $_recv_packet_dctCurr
SPOFF  
repeat_0_postfix_extension  [$_recv_packet_kk]
postfix_extension  [$_recv_packet_kk]
__postfix_extension_1__  [$_recv_packet_kk]
*literal  [
SPON  
assignment_expression  $_recv_packet_kk
conditional_expression  $_recv_packet_kk
logical_OR_expression  $_recv_packet_kk
logical_AND_expression  $_recv_packet_kk
inclusive_OR_expression  $_recv_packet_kk
exclusive_OR_expression  $_recv_packet_kk
AND_expression  $_recv_packet_kk
equality_expression  $_recv_packet_kk
relational_expression  $_recv_packet_kk
shift_expression  $_recv_packet_kk
additive_expression  $_recv_packet_kk
multiplicative_expression  $_recv_packet_kk
cast_expression  $_recv_packet_kk
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_kk
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_kk
postfix_expression  $_recv_packet_kk
primary  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
SPOFF  
*literal  ]
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2; //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
declaration_or_statement  /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2;
declaration  /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2;
__declaration_4__  /* DECL: 39 */ int $_recv_packet_sign = (rand ()) % 2;
opt__inLineComment  /* DECL: 39 */
inLineComment  /* DECL: 39 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_recv_packet_sign = (rand ()) % 2
init_declarator  $_recv_packet_sign = (rand ()) % 2
declarator  $_recv_packet_sign
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_recv_packet_sign
reference_id  $_recv_packet_sign
id  $_recv_packet_sign
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = (rand ()) % 2
initialization  = (rand ()) % 2
__initialization_1__  = (rand ()) % 2
opt__initdata  
empty  
*literal  =
initializer  (rand ()) % 2
__initializer_1__  (rand ()) % 2
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  (rand ()) % 2
initializer_unit  (rand ()) % 2
assignment_expression  (rand ()) % 2
conditional_expression  (rand ()) % 2
logical_OR_expression  (rand ()) % 2
logical_AND_expression  (rand ()) % 2
inclusive_OR_expression  (rand ()) % 2
exclusive_OR_expression  (rand ()) % 2
AND_expression  (rand ()) % 2
equality_expression  (rand ()) % 2
relational_expression  (rand ()) % 2
shift_expression  (rand ()) % 2
additive_expression  (rand ()) % 2
multiplicative_expression  (rand ()) % 2
cast_expression  (rand ())
repeat_0_cast_operator  
empty  
empty  
unary_expression  (rand ())
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  (rand ())
postfix_expression  (rand ())
primary  (rand ())
__primary_1__  (rand ())
*literal  (
SPON  
expression_list  rand ()
list_0_expression  rand ()
expression  rand ()
assignment_expression  rand ()
conditional_expression  rand ()
logical_OR_expression  rand ()
logical_AND_expression  rand ()
inclusive_OR_expression  rand ()
exclusive_OR_expression  rand ()
AND_expression  rand ()
equality_expression  rand ()
relational_expression  rand ()
shift_expression  rand ()
additive_expression  rand ()
multiplicative_expression  rand ()
cast_expression  rand ()
repeat_0_cast_operator  
empty  
empty  
unary_expression  rand ()
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  rand ()
postfix_expression  rand ()
primary  rand
reference_id  rand
id  rand
SPOFF  
repeat_0_postfix_extension   ()
postfix_extension   ()
__postfix_extension_2__   ()
SP   
*literal  (
SPON  
list_0_argument_expression  
argument_expression  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
opt__lit__,  
empty  
*literal  )
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  % 2
multipy_divide_cast_expression  % 2
multiplicative_operator  %
*literal  %
cast_expression  2
repeat_0_cast_operator  
empty  
empty  
unary_expression  2
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  2
postfix_expression  2
primary  2
constant  2
number  2
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //COMPOUND START: if ($_recv_packet_sign = 1) {} /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
declaration_or_statement  //COMPOUND START: if ($_recv_packet_sign = 1) {}
commentLine  //COMPOUND START: if ($_recv_packet_sign = 1) {}
commentToken  //COMPOUND START: if ($_recv_packet_sign = 1) {}
NL  
repeat_0_declaration_or_statement  /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */} //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
declaration_or_statement  /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
statement  /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
__statement_2__  /* COMPOUND: 8 */ if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* COMPOUND: 8 */
inLineComment  /* COMPOUND: 8 */
repeat_0_label  
empty  
empty  
unlabeled_statement  if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
c_unlabeled_statement  if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
structured_statement  if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
if_statement  if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
__if_statement_1__  if ($_recv_packet_sign = 1) {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
*literal  if
*literal  (
expression_list  $_recv_packet_sign = 1
list_0_expression  $_recv_packet_sign = 1
expression  $_recv_packet_sign = 1
assignment_expression  $_recv_packet_sign = 1
__assignment_expression_1__  $_recv_packet_sign = 1
unary_expression_assign  $_recv_packet_sign =
unary_expression  $_recv_packet_sign
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_sign
postfix_expression  $_recv_packet_sign
primary  $_recv_packet_sign
reference_id  $_recv_packet_sign
id  $_recv_packet_sign
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
assignment_operator  =
*literal  =
assignment_expression  1
conditional_expression  1
logical_OR_expression  1
logical_AND_expression  1
inclusive_OR_expression  1
exclusive_OR_expression  1
AND_expression  1
equality_expression  1
relational_expression  1
shift_expression  1
additive_expression  1
multiplicative_expression  1
cast_expression  1
repeat_0_cast_operator  
empty  
empty  
unary_expression  1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  1
postfix_expression  1
primary  1
constant  1
number  1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
list_0_expression  
empty  
empty  
repeat_0_preprocessor  
empty  
empty  
*literal  )
sub_statement  {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
compound_statement  {/* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate; /* COMPOUND: 8 */}
*literal  {
IN  
NL  
compound_statement_body  /* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
repeat_0_declaration_or_statement  /* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
declaration_or_statement  /* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
statement  /* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
__statement_2__  /* STM: 19 */ $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 19 */
inLineComment  /* STM: 19 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
c_unlabeled_statement  $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
__c_unlabeled_statement_1__  $_recv_packet_intermediate = 0 - $_recv_packet_intermediate;
simple_statement  $_recv_packet_intermediate = 0 - $_recv_packet_intermediate
expression_statement  $_recv_packet_intermediate = 0 - $_recv_packet_intermediate
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_recv_packet_intermediate
conditional_expression  $_recv_packet_intermediate
logical_OR_expression  $_recv_packet_intermediate
logical_AND_expression  $_recv_packet_intermediate
inclusive_OR_expression  $_recv_packet_intermediate
exclusive_OR_expression  $_recv_packet_intermediate
AND_expression  $_recv_packet_intermediate
equality_expression  $_recv_packet_intermediate
relational_expression  $_recv_packet_intermediate
shift_expression  $_recv_packet_intermediate
additive_expression  $_recv_packet_intermediate
multiplicative_expression  $_recv_packet_intermediate
cast_expression  $_recv_packet_intermediate
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_intermediate
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_intermediate
postfix_expression  $_recv_packet_intermediate
primary  $_recv_packet_intermediate
reference_id  $_recv_packet_intermediate
id  $_recv_packet_intermediate
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = 0 - $_recv_packet_intermediate
assign_assignment_expression  = 0 - $_recv_packet_intermediate
assignment_operator  =
*literal  =
assignment_expression  0 - $_recv_packet_intermediate
conditional_expression  0 - $_recv_packet_intermediate
logical_OR_expression  0 - $_recv_packet_intermediate
logical_AND_expression  0 - $_recv_packet_intermediate
inclusive_OR_expression  0 - $_recv_packet_intermediate
exclusive_OR_expression  0 - $_recv_packet_intermediate
AND_expression  0 - $_recv_packet_intermediate
equality_expression  0 - $_recv_packet_intermediate
relational_expression  0 - $_recv_packet_intermediate
shift_expression  0 - $_recv_packet_intermediate
additive_expression  0 - $_recv_packet_intermediate
multiplicative_expression  0
cast_expression  0
repeat_0_cast_operator  
empty  
empty  
unary_expression  0
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  0
postfix_expression  0
primary  0
constant  0
number  0
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  - $_recv_packet_intermediate
add_subtract_multiplicative_expression  - $_recv_packet_intermediate
additive_operator  -
*literal  -
multiplicative_expression  $_recv_packet_intermediate
cast_expression  $_recv_packet_intermediate
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_intermediate
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_intermediate
postfix_expression  $_recv_packet_intermediate
primary  $_recv_packet_intermediate
reference_id  $_recv_packet_intermediate
id  $_recv_packet_intermediate
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  /* COMPOUND: 8 */
inLineComment  /* COMPOUND: 8 */
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  //COMPOUND END: if ($_recv_packet_sign = 1) {} /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
declaration_or_statement  //COMPOUND END: if ($_recv_packet_sign = 1) {}
commentLine  //COMPOUND END: if ($_recv_packet_sign = 1) {}
commentToken  //COMPOUND END: if ($_recv_packet_sign = 1) {}
NL  
repeat_0_declaration_or_statement  /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
declaration_or_statement  /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
statement  /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
__statement_2__  /* STM: 20 */ $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  /* STM: 20 */
inLineComment  /* STM: 20 */
repeat_0_label  
empty  
empty  
unlabeled_statement  $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
c_unlabeled_statement  $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
__c_unlabeled_statement_1__  $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate;
simple_statement  $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate
expression_statement  $_recv_packet_odata[$_recv_packet_kk] = (int) $_recv_packet_intermediate
repeat_0_pre_increment_operator  
empty  
empty  
assignment_expression  $_recv_packet_odata[$_recv_packet_kk]
conditional_expression  $_recv_packet_odata[$_recv_packet_kk]
logical_OR_expression  $_recv_packet_odata[$_recv_packet_kk]
logical_AND_expression  $_recv_packet_odata[$_recv_packet_kk]
inclusive_OR_expression  $_recv_packet_odata[$_recv_packet_kk]
exclusive_OR_expression  $_recv_packet_odata[$_recv_packet_kk]
AND_expression  $_recv_packet_odata[$_recv_packet_kk]
equality_expression  $_recv_packet_odata[$_recv_packet_kk]
relational_expression  $_recv_packet_odata[$_recv_packet_kk]
shift_expression  $_recv_packet_odata[$_recv_packet_kk]
additive_expression  $_recv_packet_odata[$_recv_packet_kk]
multiplicative_expression  $_recv_packet_odata[$_recv_packet_kk]
cast_expression  $_recv_packet_odata[$_recv_packet_kk]
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_odata[$_recv_packet_kk]
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_odata[$_recv_packet_kk]
postfix_expression  $_recv_packet_odata[$_recv_packet_kk]
primary  $_recv_packet_odata
reference_id  $_recv_packet_odata
id  $_recv_packet_odata
SPOFF  
repeat_0_postfix_extension  [$_recv_packet_kk]
postfix_extension  [$_recv_packet_kk]
__postfix_extension_1__  [$_recv_packet_kk]
*literal  [
SPON  
assignment_expression  $_recv_packet_kk
conditional_expression  $_recv_packet_kk
logical_OR_expression  $_recv_packet_kk
logical_AND_expression  $_recv_packet_kk
inclusive_OR_expression  $_recv_packet_kk
exclusive_OR_expression  $_recv_packet_kk
AND_expression  $_recv_packet_kk
equality_expression  $_recv_packet_kk
relational_expression  $_recv_packet_kk
shift_expression  $_recv_packet_kk
additive_expression  $_recv_packet_kk
multiplicative_expression  $_recv_packet_kk
cast_expression  $_recv_packet_kk
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_kk
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_kk
postfix_expression  $_recv_packet_kk
primary  $_recv_packet_kk
reference_id  $_recv_packet_kk
id  $_recv_packet_kk
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
SPOFF  
*literal  ]
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  = (int) $_recv_packet_intermediate
assign_assignment_expression  = (int) $_recv_packet_intermediate
assignment_operator  =
*literal  =
assignment_expression  (int) $_recv_packet_intermediate
conditional_expression  (int) $_recv_packet_intermediate
logical_OR_expression  (int) $_recv_packet_intermediate
logical_AND_expression  (int) $_recv_packet_intermediate
inclusive_OR_expression  (int) $_recv_packet_intermediate
exclusive_OR_expression  (int) $_recv_packet_intermediate
AND_expression  (int) $_recv_packet_intermediate
equality_expression  (int) $_recv_packet_intermediate
relational_expression  (int) $_recv_packet_intermediate
shift_expression  (int) $_recv_packet_intermediate
additive_expression  (int) $_recv_packet_intermediate
multiplicative_expression  (int) $_recv_packet_intermediate
cast_expression  (int) $_recv_packet_intermediate
repeat_0_cast_operator  (int)
cast_operator  (int)
*literal  (
type_name  int
type_specifiers  int
__type_specifiers_1__  int
repeat_0_type_qualifier  
empty  
empty  
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_type_qualifier  
empty  
empty  
repeat_0_abstract_declarator  
empty  
empty  
*literal  )
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_intermediate
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_intermediate
postfix_expression  $_recv_packet_intermediate
primary  $_recv_packet_intermediate
reference_id  $_recv_packet_intermediate
id  $_recv_packet_intermediate
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_assign_assignment_expression  
empty  
empty  
opt__comma_expression_statement  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  /* COMPOUND: 7 */
inLineComment  /* COMPOUND: 7 */
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
repeat_0_declaration_or_statement  //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {} /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {}
commentLine  //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {}
commentToken  //COMPOUND END: for ($_recv_packet_kk = 0; $_recv_packet_kk < $_recv_packet_num_samples; $_recv_packet_kk++) {}
NL  
repeat_0_declaration_or_statement  /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata; /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata;
declaration  /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata;
__declaration_4__  /* DECL: 40 */ int $_idct_idata1 = $_recv_packet_odata;
opt__inLineComment  /* DECL: 40 */
inLineComment  /* DECL: 40 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_idct_idata1 = $_recv_packet_odata
init_declarator  $_idct_idata1 = $_recv_packet_odata
declarator  $_idct_idata1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_idct_idata1
reference_id  $_idct_idata1
id  $_idct_idata1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_recv_packet_odata
initialization  = $_recv_packet_odata
__initialization_1__  = $_recv_packet_odata
opt__initdata  
empty  
*literal  =
initializer  $_recv_packet_odata
__initializer_1__  $_recv_packet_odata
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_recv_packet_odata
initializer_unit  $_recv_packet_odata
assignment_expression  $_recv_packet_odata
conditional_expression  $_recv_packet_odata
logical_OR_expression  $_recv_packet_odata
logical_AND_expression  $_recv_packet_odata
inclusive_OR_expression  $_recv_packet_odata
exclusive_OR_expression  $_recv_packet_odata
AND_expression  $_recv_packet_odata
equality_expression  $_recv_packet_odata
relational_expression  $_recv_packet_odata
shift_expression  $_recv_packet_odata
additive_expression  $_recv_packet_odata
multiplicative_expression  $_recv_packet_odata
cast_expression  $_recv_packet_odata
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_odata
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_odata
postfix_expression  $_recv_packet_odata
primary  $_recv_packet_odata
reference_id  $_recv_packet_odata
id  $_recv_packet_odata
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno; return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno;
declaration  /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno;
__declaration_4__  /* DECL: 41 */ int $_idct_caca1 = $_recv_packet_prev_seqno;
opt__inLineComment  /* DECL: 41 */
inLineComment  /* DECL: 41 */
decl_specifiers  int
repeat_0_decl_qualifier_or_type_specifier  int
decl_qualifier_or_type_specifier  int
type_specifier  int
simple_type_name  int
*literal  int
repeat_0_decl_qualifier_or_type_specifier  
empty  
empty  
list_0_init_declarator  $_idct_caca1 = $_recv_packet_prev_seqno
init_declarator  $_idct_caca1 = $_recv_packet_prev_seqno
declarator  $_idct_caca1
repeat_0_attribute_spec  
empty  
empty  
repeat_0_ptr_operator  
empty  
empty  
base_declarator  $_idct_caca1
reference_id  $_idct_caca1
id  $_idct_caca1
SPON  
repeat_0_declarator_extension  
empty  
empty  
repeat_0_attribute_spec  
empty  
empty  
repeat_0_attributes_or_asm  
empty  
empty  
opt__initialization  = $_recv_packet_prev_seqno
initialization  = $_recv_packet_prev_seqno
__initialization_1__  = $_recv_packet_prev_seqno
opt__initdata  
empty  
*literal  =
initializer  $_recv_packet_prev_seqno
__initializer_1__  $_recv_packet_prev_seqno
repeat_0_preprocessor  
empty  
empty  
repeat_0_initializer_unit  $_recv_packet_prev_seqno
initializer_unit  $_recv_packet_prev_seqno
assignment_expression  $_recv_packet_prev_seqno
conditional_expression  $_recv_packet_prev_seqno
logical_OR_expression  $_recv_packet_prev_seqno
logical_AND_expression  $_recv_packet_prev_seqno
inclusive_OR_expression  $_recv_packet_prev_seqno
exclusive_OR_expression  $_recv_packet_prev_seqno
AND_expression  $_recv_packet_prev_seqno
equality_expression  $_recv_packet_prev_seqno
relational_expression  $_recv_packet_prev_seqno
shift_expression  $_recv_packet_prev_seqno
additive_expression  $_recv_packet_prev_seqno
multiplicative_expression  $_recv_packet_prev_seqno
cast_expression  $_recv_packet_prev_seqno
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_recv_packet_prev_seqno
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_recv_packet_prev_seqno
postfix_expression  $_recv_packet_prev_seqno
primary  $_recv_packet_prev_seqno
reference_id  $_recv_packet_prev_seqno
id  $_recv_packet_prev_seqno
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
repeat_0_initializer_unit  
empty  
empty  
list_0_init_declarator  
empty  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  return idct ($_idct_idata1, $_idct_caca1); //call_the_function: idct idct1
declaration_or_statement  return idct ($_idct_idata1, $_idct_caca1);
statement  return idct ($_idct_idata1, $_idct_caca1);
__statement_2__  return idct ($_idct_idata1, $_idct_caca1);
repeat_0_preprocessor  
empty  
empty  
opt__inLineComment  
empty  
repeat_0_label  
empty  
empty  
unlabeled_statement  return idct ($_idct_idata1, $_idct_caca1);
c_unlabeled_statement  return idct ($_idct_idata1, $_idct_caca1);
__c_unlabeled_statement_1__  return idct ($_idct_idata1, $_idct_caca1);
simple_statement  return idct ($_idct_idata1, $_idct_caca1)
jump_statement  return idct ($_idct_idata1, $_idct_caca1)
__jump_statement_2__  return idct ($_idct_idata1, $_idct_caca1)
*literal  return
opt__expression  idct ($_idct_idata1, $_idct_caca1)
expression  idct ($_idct_idata1, $_idct_caca1)
assignment_expression  idct ($_idct_idata1, $_idct_caca1)
conditional_expression  idct ($_idct_idata1, $_idct_caca1)
logical_OR_expression  idct ($_idct_idata1, $_idct_caca1)
logical_AND_expression  idct ($_idct_idata1, $_idct_caca1)
inclusive_OR_expression  idct ($_idct_idata1, $_idct_caca1)
exclusive_OR_expression  idct ($_idct_idata1, $_idct_caca1)
AND_expression  idct ($_idct_idata1, $_idct_caca1)
equality_expression  idct ($_idct_idata1, $_idct_caca1)
relational_expression  idct ($_idct_idata1, $_idct_caca1)
shift_expression  idct ($_idct_idata1, $_idct_caca1)
additive_expression  idct ($_idct_idata1, $_idct_caca1)
multiplicative_expression  idct ($_idct_idata1, $_idct_caca1)
cast_expression  idct ($_idct_idata1, $_idct_caca1)
repeat_0_cast_operator  
empty  
empty  
unary_expression  idct ($_idct_idata1, $_idct_caca1)
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  idct ($_idct_idata1, $_idct_caca1)
postfix_expression  idct ($_idct_idata1, $_idct_caca1)
primary  idct
reference_id  idct
id  idct
SPOFF  
repeat_0_postfix_extension   ($_idct_idata1, $_idct_caca1)
postfix_extension   ($_idct_idata1, $_idct_caca1)
__postfix_extension_2__   ($_idct_idata1, $_idct_caca1)
SP   
*literal  (
SPON  
list_0_argument_expression  $_idct_idata1, $_idct_caca1
argument_expression  $_idct_idata1
__argument_expression_1__  $_idct_idata1
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_idct_idata1
conditional_expression  $_idct_idata1
logical_OR_expression  $_idct_idata1
logical_AND_expression  $_idct_idata1
inclusive_OR_expression  $_idct_idata1
exclusive_OR_expression  $_idct_idata1
AND_expression  $_idct_idata1
equality_expression  $_idct_idata1
relational_expression  $_idct_idata1
shift_expression  $_idct_idata1
additive_expression  $_idct_idata1
multiplicative_expression  $_idct_idata1
cast_expression  $_idct_idata1
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_idct_idata1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_idct_idata1
postfix_expression  $_idct_idata1
primary  $_idct_idata1
reference_id  $_idct_idata1
id  $_idct_idata1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  $_idct_caca1
argument_expression  $_idct_caca1
__argument_expression_1__  $_idct_caca1
repeat_0_preprocessor  
empty  
empty  
opt__id  
empty  
assignment_expression  $_idct_caca1
conditional_expression  $_idct_caca1
logical_OR_expression  $_idct_caca1
logical_AND_expression  $_idct_caca1
inclusive_OR_expression  $_idct_caca1
exclusive_OR_expression  $_idct_caca1
AND_expression  $_idct_caca1
equality_expression  $_idct_caca1
relational_expression  $_idct_caca1
shift_expression  $_idct_caca1
additive_expression  $_idct_caca1
multiplicative_expression  $_idct_caca1
cast_expression  $_idct_caca1
repeat_0_cast_operator  
empty  
empty  
unary_expression  $_idct_caca1
repeat_0_pre_increment_operator  
empty  
empty  
sub_unary_expression  $_idct_caca1
postfix_expression  $_idct_caca1
primary  $_idct_caca1
reference_id  $_idct_caca1
id  $_idct_caca1
SPOFF  
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
opt__id  
empty  
opt__colon_number  
empty  
repeat_0_preprocessor  
empty  
empty  
list_0_argument_expression  
empty  
empty  
opt__dotdot  
empty  
SPOFF  
*literal  )
repeat_0_postfix_extension  
empty  
empty  
SPON  
SPON  
repeat_0_multipy_divide_cast_expression  
empty  
empty  
repeat_0_add_subtract_multiplicative_expression  
empty  
empty  
repeat_0_shift_additive_expression  
empty  
empty  
repeat_0_relational_shift_expression  
empty  
empty  
repeat_0_equality_relational_expression  
empty  
empty  
repeat_0_AND_equality_expression  
empty  
empty  
repeat_0_exclusive_OR_AND_expression  
empty  
empty  
repeat_0_OR_exclusive_OR_expression  
empty  
empty  
repeat_0_AND_inclusive_OR_expression  
empty  
empty  
repeat_0_OR_logical_AND_expression  
empty  
empty  
opt__conditional_operation  
empty  
semi  ;
*literal  ;
NL  
repeat_0_declaration_or_statement  //call_the_function: idct idct1
declaration_or_statement  //call_the_function: idct idct1
commentLine  //call_the_function: idct idct1
commentToken  //call_the_function: idct idct1
NL  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  
empty  
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  
empty  
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
opt__else_statement  
empty  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  
empty  
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
repeat_0_declaration_or_statement  
empty  
empty  
EX  
opt__inLineComment  
empty  
*literal  }
opt__lit__;  
empty  
NL  
repeat_0_preprocessor  
empty  
empty  
NL  
repeat_0_function_definition_or_declaration  
empty  
empty  
